var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function r(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.d(t,{Z:()=>a});const a=function(){function e(t,r,n,o,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=r,this.state=n,this.mode=o,this.util=a}var t,a;return t=e,a=[{key:"onRender",value:function(){var e=window.location.href.replace("inputs","configuration"),t=["object_name","operation_name","signature","params","split_array"];this.util.setState((function(o){var a=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}({},o.data);return a.account.markdownMessage={text:"Select an account. Additional accounts may be configured from ##here##",link:e,markdownType:"hybrid",token:"##here##",linkText:"here"},t.forEach((function(e){a[e].disabled=!0})),{data:a}}))}}],a&&o(t.prototype,a),e}();var i=t.Z;export{i as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRfaG9vay4zLjAuMC5qcyIsIm1hcHBpbmdzIjoiQUFDQSxJQUFJQSxFQUFzQixDQ0ExQkEsRUFBd0IsQ0FBQ0MsRUFBU0MsS0FDakMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYRixFQUFvQkksRUFBRUYsRUFBWUMsS0FBU0gsRUFBb0JJLEVBQUVILEVBQVNFLElBQzVFRSxPQUFPQyxlQUFlTCxFQUFTRSxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsTUNKM0VILEVBQXdCLENBQUNTLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEksa2hCQ2lFbEYsUUEzRE1JLFdBZ0JKLHVCLDRGQUEyRCxTQUN6REMsS0FBQSxlQUNBQSxLQUFBLGNBQ0FBLEtBQUEsUUFDQUEsS0FBQSxPQUNBQSxLQUFBLE8sNENBTUYsV0FFRSxJQUFNQyxFQUFtQkMsT0FBQUEsU0FBQUEsS0FBQUEsUUFBQUEsU0FBekIsaUJBSU1DLEVBQWtCLENBQUMsY0FBRCxzQ0FBeEIsZUFTQUgsS0FBQSxlQUFtQixZQUNqQixJQUFNSSxFLCtWQUFPLENBQUgsR0FBUUMsRUFBbEIsTUFXQSxPQVZBRCxFQUFBQSxRQUFBQSxnQkFBK0IsQ0FDN0JFLEtBRDZCLHlFQUU3QkMsS0FGNkIsRUFHN0JDLGFBSDZCLFNBSTdCQyxNQUo2QixXQUs3QkMsU0FBVSxRQUVaUCxFQUFBQSxTQUF3QixZQUN0QkMsRUFBQUEsR0FBQUEsVUFBQUEsS0FFSyxDQUFFQSxLQUFBQSxTLHNCQXREVEwsRyIsInNvdXJjZXMiOlsid2VicGFjazovL1NwbHVua19UQV90b21jYXQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX3RvbWNhdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX3RvbWNhdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL1NwbHVua19UQV90b21jYXQvLi91Y2NfdWlfZXh0ZW5zaW9ucy9pbnB1dF9ob29rLjMuMC4wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjEgU3BsdW5rLCBJbmMuIDxzYWxlc0BzcGx1bmsuY29tPlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExpY2Vuc2VSZWYtU3BsdW5rLTgtMjAyMVxuICpcbiAqL1xuXG5jbGFzcyBJbnB1dEhvb2sge1xuICAvKipcbiAgICogRm9ybSBob29rXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge09iamVjdH0gZ2xvYmFsQ29uZmlnIC0gR2xvYmFsIGNvbmZpZ3VyYXRpb24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzZXJ2aWNlTmFtZSAtIFNlcnZpY2UgbmFtZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBJbml0aWFsIHN0YXRlIG9mIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIC0gZWRpdCxjcmVhdGUgb3IgY2xvbmVcbiAgICogQHBhcmFtIHtvYmplY3R9IHV0aWwgLSBPYmplY3QgY29udGFpbmluZyB1dGlsaXR5IG1ldGhvZHNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVycm9yTXNnLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3JGaWVsZE1zZyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyQWxsRXJyb3JNc2dcbiAgICogICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZ2xvYmFsQ29uZmlnLCBzZXJ2aWNlTmFtZSwgc3RhdGUsIG1vZGUsIHV0aWwpIHtcbiAgICB0aGlzLmdsb2JhbENvbmZpZyA9IGdsb2JhbENvbmZpZ1xuICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZVxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZVxuICAgIHRoaXMubW9kZSA9IG1vZGVcbiAgICB0aGlzLnV0aWwgPSB1dGlsXG4gIH1cblxuICAvKlxuICAgICAgICAgIFB1dCBsb2dpYyBoZXJlIHRvIGV4ZWN1dGUgamF2YXNjcmlwdCB3aGVuIFVJIGdldHMgcmVuZGVyZWQuXG4gICAgICAqL1xuICBvblJlbmRlciAoKSB7XG4gICAgLyogR2V0IHdpbmRvdyB1cmwgdG8gYWRkIHJlZGlyZWN0IHRvIENvbmZpZ3VyYXRpb24gcGFnZSBpbiBhY2NvdW50IGZpZWxkIGhlbHAgdGV4dCAqL1xuICAgIGNvbnN0IEFjY291bnRDb25maWdVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKFxuICAgICAgJ2lucHV0cycsXG4gICAgICAnY29uZmlndXJhdGlvbidcbiAgICApXG4gICAgY29uc3QgZmllbGRzVG9EaXNhYmxlID0gW1xuICAgICAgJ29iamVjdF9uYW1lJyxcbiAgICAgICdvcGVyYXRpb25fbmFtZScsXG4gICAgICAnc2lnbmF0dXJlJyxcbiAgICAgICdwYXJhbXMnLFxuICAgICAgJ3NwbGl0X2FycmF5J1xuICAgIF1cblxuICAgIC8qIE9uIGxvYWQgb2YgSW5wdXRzIHBhZ2UgYWRkIGhlbHAgdGV4dCB1bmRlciBhY2NvdW50IGZpZWxkIGFuZCBkaXNhYmxlIDUgZmllbGRzICovXG4gICAgdGhpcy51dGlsLnNldFN0YXRlKChwcmV2U3RhdGUpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IC4uLnByZXZTdGF0ZS5kYXRhIH1cbiAgICAgIGRhdGEuYWNjb3VudC5tYXJrZG93bk1lc3NhZ2UgPSB7XG4gICAgICAgIHRleHQ6ICdTZWxlY3QgYW4gYWNjb3VudC4gQWRkaXRpb25hbCBhY2NvdW50cyBtYXkgYmUgY29uZmlndXJlZCBmcm9tICMjaGVyZSMjJyxcbiAgICAgICAgbGluazogQWNjb3VudENvbmZpZ1VybCxcbiAgICAgICAgbWFya2Rvd25UeXBlOiAnaHlicmlkJyxcbiAgICAgICAgdG9rZW46ICcjI2hlcmUjIycsXG4gICAgICAgIGxpbmtUZXh0OiAnaGVyZSdcbiAgICAgIH1cbiAgICAgIGZpZWxkc1RvRGlzYWJsZS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICBkYXRhW2ZpZWxkXS5kaXNhYmxlZCA9IHRydWVcbiAgICAgIH0pXG4gICAgICByZXR1cm4geyBkYXRhIH1cbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElucHV0SG9va1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiSW5wdXRIb29rIiwidGhpcyIsIkFjY291bnRDb25maWdVcmwiLCJ3aW5kb3ciLCJmaWVsZHNUb0Rpc2FibGUiLCJkYXRhIiwicHJldlN0YXRlIiwidGV4dCIsImxpbmsiLCJtYXJrZG93blR5cGUiLCJ0b2tlbiIsImxpbmtUZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==