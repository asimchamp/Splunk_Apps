[module]
# The JavaScript name of the module
className = Splunk.Module.SimpleResultsTableExtended

# The module class to subclass from
superClass = Splunk.Module.AbstractPagedModule

description = This module extends the SimpleResultsTable by allowing the user to add color to fields based on numerical values.  The SimpleResultsTable code was used as the base for the modification.  The data overlay (heatmap) functionality has been removed. 

[param:entityName]
required = False
default = auto
label = This determines whether the viewer should build table row/columns based on events, results or auto detect.
values = events,results,auto

[param:displayRowNumbers]
required = False
label = If this is set to true then row numbers are displayed alongside each row in the table.
default = on

[param:displayMenu]
required = False
label = This controls whether table cells have a dropdown menu with search suggestions when clicked on.
default = False

[param:dataOverlayMode]
required = False
default = none
label = This indicates the default data overlay mode with values of heatmap, highlow and none.

[param:allowTransformedFieldSelect]
required = false
default = false
label = This indicates whether or not Splunk should observe any field list setting while it renders transformed results.  It is generally only used in fixed configuration situations like dashboards.  It defaults to false, which results in all fields in a transforming search being displayed.

[param:drilldown]
required = false
default = none
values = all, row, none
label = This indicates whether the module allows the user to select a particular cell.  The behaviour is abstract though, and the specifics are determined by the child modules in the view.

[param:drilldownPrefix]
required = False
default = click
label = Not required.  Since this defaults to 'click', by default the keys will come down in the context as 'click.name',  'click.value',  'click.name2',  'click.value2'.   In cases where you are nesting multiple drilldown patterns in the same view, this key is used so that the second set of keys does not collide with the first. For example if you have a nested config you might set the first to "userClick", and the second to "applicationClick".    

[param:colorCode]
required = False
default = none
label = This specifies the comparison of the values and the color they should be.  The format is [<,>,=],<integer>,<HTML color>(:[<,>,=],<integer>,<HTML color>)+.  The values are evaluated from left to right.  Example: >,40,#FF0000:>,30,#FFFF00   This would show values over 40 are red andall values over 30 are yellow.

[param:fieldToColor]
required = False
default = none
label = Specify the field that will have the color code applied to it.  If a colorCode is specified this field must be specified for color codes to be applied.

[param:defaultColor]
required = False
default = none
label = This specifies the default color of the background of the field if none of the color code matches.
