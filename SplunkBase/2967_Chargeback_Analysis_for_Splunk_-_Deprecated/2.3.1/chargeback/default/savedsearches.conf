[default]
[Index Utilization by Index]
realtime_schedule = 0
description = Summary Index for Index Utilization
search = index=_internal source=*license_usage.log* type="Usage"       \
| foreach h s idx [eval <<FIELD>>=if(len(<<FIELD>>)=0 OR isnull(<<FIELD>>),"(SQUASHED)",<<FIELD>>)]       \
| stats sum(b) AS total_volume by idx\
| eval total_volume = total_volume/1024/1024/1024
dispatch.latest_time = now
cron_schedule = 0 0 * * *
dispatch.earliest_time = -1d
alert.track = 0
action.summary_index._name = index_utilization_summary
action.summary_index = 1
auto_summarize.dispatch.earliest_time = -1d@h
alert.severity = 1
alert.digest_mode = True
enableSched = 1
alert.suppress = 0

[Splunk "Micro" License Violation!]
counttype = number of events
dispatch.latest_time = now
action.email = 1
relation = greater than
request.ui_dispatch_view = search
display.page.search.tab = statistics
dispatch.earliest_time = -1d
search = | rest /services/data/indexes splunk_server=* \
| rename title as idx \
| join type=outer max=0 idx \
    [| inputlookup customers.csv] \
| dedup group idx percent_ownership \
| search group="*" \
| eval license_rate = 25 \
| eval hot_warm_storage_rate = .002 \
| eval cold_storage_rate = .001 \
| eval rep_factor = 2 \
| eval "Years Retention" = round(frozenTimePeriodInSecs/31536000,2) \
| rex field=micro_lic_GB mode=sed "s/^(\.)/0./g" \
| foreach *MB \
    [ eval <<MATCHSTR>>GB = '<<FIELD>>' / 1024 ] \
| eval hot_warm_calc_gb = if('homePath.maxDataSizeGB' == 0, maxTotalDataSizeGB, 'homePath.maxDataSizeGB') \
| eval hot_warm_calc_gb = if('storage_size_override_hot_warm' == 0, hot_warm_calc_gb, 'storage_size_override_hot_warm') \
| eval hot_warm_storage_cost = hot_warm_calc_gb * hot_warm_storage_rate * rep_factor * percent_ownership / 100 \
| eval cold_calc_gb = maxTotalDataSizeGB - 'homePath.maxDataSizeGB' \
| eval cold_calc_gb = if('coldPath.maxDataSizeGB' == 0 AND 'homePath.maxDataSizeGB' = 0, 0, cold_calc_gb) \
| eval cold_calc_gb = if('storage_size_override_cold' == 0, hot_warm_calc_gb, 'storage_size_override_cold') \
| eval cold_storage_cost = cold_calc_gb * cold_storage_rate * rep_factor * percent_ownership / 100 \
| eval total_storage_conf_gb = hot_warm_calc_gb + cold_calc_gb \
| eval stor_cost = (hot_warm_storage_cost + cold_storage_cost) * percent_ownership / 100 * 365 \
| eval lic_cost = micro_lic_GB * license_rate * percent_ownership / 100 * 365 \
| eval homePathmaxDataSizeGB = 'homePath.maxDataSizeGB' \
| eval coldPathmaxDataSizeGB = 'coldPath.maxDataSizeGB' \
| eval totalPathmaxDataSizeGB = homePathmaxDataSizeGB + coldPathmaxDataSizeGB \
| addcoltotals lic_cost stor_cost hot_warm_storage_cost cold_storage_cost \
| eval total_cost = lic_cost+stor_cost \
| foreach *_cost *_rate *GB cold_calc_gb percent_ownership \
    [ eval <<FIELD>> = round( '<<FIELD>>' , 2 ) ] \
| table idx, splunk_server, eai:acl.app, micro_lic_GB, license_rate, lic_cost, currentDBSizeGB, homePath_expanded, coldPath_expanded, maxTotalDataSizeGB, totalEventCount, disabled, years_retention, hot_warm_calc_gb, hot_warm_storage_rate, hot_warm_storage_cost, cold_calc_gb, cold_storage_rate, cold_storage_cost, stor_cost, percent_ownership, total_cost, total_storage_conf_gb, group, homePathmaxDataSizeGB, coldPathmaxDataSizeGB, totalPathmaxDataSizeGB, rep_factor, owner_email \
| sort idx, splunk_server, eai:acl.app, micro_lic_GB, license_rate, lic_cost, currentDBSizeGB, homePath_expanded, coldPath_expanded, maxTotalDataSizeGB, totalEventCount, disabled, years_retention, hot_warm_calc_gb, hot_warm_storage_rate, hot_warm_storage_cost, cold_calc_gb, cold_storage_rate, cold_storage_cost, stor_cost, percent_ownership, total_cost, total_storage_conf_gb, group, homePathmaxDataSizeGB, coldPathmaxDataSizeGB, totalPathmaxDataSizeGB, rep_factor, owner_email \
| rename idx AS Index, splunk_server AS "Splunk Server", micro_lic_GB AS "Micro License GB", license_rate AS "License Rate", lic_cost AS "License Cost", stor_cost AS "Storage Cost", total_cost AS "Total Cost", currentDBSizeGB AS "Current GB Used", maxTotalDataSizeGB AS "Max Index Size GB", eai:acl.app AS "App ACL", totalEventCount AS "Event Count", disabled AS Disabled, percent_ownership AS "Percent Ownership", hot_warm_calc_gb AS "Hot/Warm Calc GB", cold_calc_gb AS "Cold Calc GB", hot_warm_storage_rate AS "Hot/Warm Storage Rate", cold_storage_rate AS "Cold Rate", hot_warm_storage_cost AS "Hot/Warm Storage Cost", cold_storage_cost AS "Cold Storage Cost", total_storage_conf_gb AS "Total Storage Conf GB",homePathmaxDataSizeGB AS "Max Hot/Warm Size GB", coldPathmaxDataSizeGB AS "Max Cold Size GB", totalPathmaxDataSizeGB AS "Max Hot/Warm/Cold Total", rep_factor AS "Replication Factor" \
| stats sum("Micro License GB") AS total_license by Index owner_email \
| rename Index AS idx \
| join idx \
    [ search earliest=-1d@d latest=@d index=index_utilization_summary\
        ] \
| table idx total_volume total_license owner_email \
| eval "Alert Condition"=case('total_license' < 'total_volume', "Total Utilized Volume is Greater than the Micro License (micro_lic_GB)") \
| search "Alert Condition"=* \
| table idx, total_volume, total_license, "Alert Condition", owner_email \
| rename idx AS Index, total_license AS "Micro License", total_volume AS "Total Utilized Volume"
action.email.useNSSubject = 1
action.email.sendresults = 1
action.email.to = $result.owner_email$
alert.suppress = 0
action.email.message.alert = The $result.Index$ index is indexing more data than we agreed to.
cron_schedule = 0 1 * * *
enableSched = 1
alert.track = 1
alert.digest_mode = 0
display.general.type = statistics
quantity = 0
action.email.include.view_link = 0
request.ui_dispatch_app = chargeback
action.email.inline = 1

