# Shuttl macros #

[shuttl]
definition = index=_internal source=shuttl

[shuttl_archived_bucket]
definition = `shuttl` done="Archived bucket"

[shuttl_thawed_bucket]
definition = `shuttl` done="Thawed bucket"

[shuttl_error_raw]
definition = `shuttl` ERROR

[shuttl_error]
definition = `shuttl_error_raw` | `shuttl_rex_uri_field`

[shuttl_indexes]
definition = `shuttl` | dedup indexName



# Error & Failures #

[jetty_errors]
definition = index=_internal sourcetype=splunkd ERROR ExecProcessor shuttl/bin/start.sh NOT `jetty_false_positive_errors`

[jetty_false_positive_errors]
# Other possible false positives: "com.splunk.shuttl.server.mbeans.rest*" OR "INFO".
description = "Use as 'NOT `jetty_false_positive_errors`'."
definition = ("Unable to load realm info from SCDynamicStore")


[shuttl_failed_archived_buckets]
description = "The coldToFrozenScript will be called continously, if it fails an error will be logged that match this search."
definition = index=_internal sourcetype=splunkd ERROR BucketMover coldToFrozenScript archiveBucket.sh "exited with code 1"


[shuttl_error_dedup_field(1)]
description = "Extract keys and values to use in a dropdown list."
args = field_arg
definition = `shuttl_error` | dedup $field_arg$


# Formats #

[shuttl_time_format(1)]
args = time
definition = strftime(time, "%d/%m/%Y %I:%M:%S.%f %p")


[shuttl_bucket_table_format]
definition = _time bucketName indexName bucketSize format host uri | rename format AS bucketType, _time AS time | fieldformat time=`shuttl_time_format(time)` | fieldformat bucketSize=`bytes_as_IEC(bucketSize)`

[shuttl_bucket_table]
definition = table `shuttl_bucket_table_format`


[shuttl_index_table_format]
definition = indexName

[shuttl_index_table]
definition = table `shuttl_index_table_format`


[shuttl_uri_field_format]
definition = "(?<protocol>\w+)://(?<host>\w+):(?<port>\d+)/(?<path>(\w|/)+)/(?<indexName>(\w|-)+)/(?<bucketName>db_\d+_\d+_\d+)/(?<bucketType>\w+)"

[shuttl_rex_uri_field]
definition = rex field=uri `shuttl_uri_field_format`


[shuttl_uri_table_format]
definition = protocol host port path indexName bucketName bucketType

[shuttl_failed_buckets_table_format]
definition = _time `shuttl_uri_table_format` exception | rename _time AS time | fieldformat time=`shuttl_time_format(time)`

[shuttl_buckets_per_index_stats_format]
definition = sparkline count avg(bucketSize) sum(bucketSize) by indexName | fieldformat "avg(bucketSize)"=`bytes_as_IEC('avg(bucketSize)')` | fieldformat "sum(bucketSize)"=`bytes_as_IEC('sum(bucketSize)')`

[shuttl_buckets_per_index_stats]
definition = stats  `shuttl_buckets_per_index_stats_format` | sort indexName


#  #


# Eval - Units #

[get_IEC(1)]
args = value
definition = eval IEC = case($value$>=pow(1024,5), "PiB", $value$>=pow(1024,4), "TiB", $value$>=pow(1024,3), "GiB", $value$>=pow(1024,2), "MiB", $value$>=1024, "KiB")

[calc_IEC(2)]
args = value, pow
definition = $value$ / pow(1024, $pow$)

[calc_IEC_str(2)]
args = value, pow
definition = tostring( round( `calc_IEC($value$, $pow$)`, 1), "commas" )

[bytes_as_IEC(1)]
args = value
definition = case($value$>=pow(1024,5), `calc_IEC_str($value$,5)`+"PiB", $value$>=pow(1024,4), `calc_IEC_str($value$,4)`+"TiB", $value$>=pow(1024,3), `calc_IEC_str($value$,3)`+"GiB", $value$>=pow(1024,2), `calc_IEC_str($value$,2)`+"MiB", $value$>=1024, `calc_IEC_str($value$,1)`+"KiB", $value$>=0, $value$+"B")

[eval_bytes_as_IEC(2)]
args = field, value
definition = eval $field$ = `bytes_as_IEC($value$)`


[get_SI(1)]
args = value
definition = eval SI = case($value$>=pow(1000,5), "PB", $value$>=pow(1000,4), "TB", $value$>=pow(1000,3), "GB", $value$>=pow(1000,2), "MB", $value$>=1000, "kB")

[calc_SI(2)]
args = value, pow
definition = $value$ / pow(1000, $pow$)

[calc_SI_str(2)]
args = value, pow
definition = tostring( round( `calc_SI($value$, $pow$)`, 1), "commas" )

[bytes_as_SI(1)]
args = value
definition = case($value$>=pow(1000,5), `calc_SI_str($value$,5)`+"PB", $value$>=pow(1000,4), `calc_SI_str($value$,4)`+"TB", $value$>=pow(1000,3), `calc_SI_str($value$,3)`+"GB", $value$>=pow(1000,2), `calc_SI_str($value$,2)`+"MB", $value$>=1000, `calc_SI_str($value$,1)`+"kB", $value$>=0, $value$+"B")

[eval_bytes_as_SI(2)]
args = field, value
definition = eval $field$ = `bytes_as_SI($value$)`
