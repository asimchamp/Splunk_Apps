[bytes_to_gb_tb_pb(1)]
args = bytes
definition = eval bytes_gb = round(($bytes$/(1024*1024*1024)),2) | eval bytes_tb = round(bytes_gb/1024,2) | eval bytes_pb = round(bytes_tb/1024,2) | eval bytes = case(bytes_gb < 1024, bytes_gb, bytes_gb >= 1024 AND bytes_tb < 1024, bytes_tb, bytes_tb >= 1024, bytes_pb) | eval bytes_unit = case(bytes_gb < 1024, "GB", bytes_gb >= 1024 AND bytes_tb < 1024, "TB", bytes_tb >= 1024, "PB")
iseval = 0

[bytes_to_kb_mb_gb(1)]
args = bytes
definition = eval bytes_kb = round(($bytes$/(1024)),2) | eval bytes_mb = round(bytes_kb/1024,2) | eval bytes_gb = round(bytes_mb/1024,2) | eval bytes = case($bytes$ < 1024, round($bytes$,2), $bytes$ >= 1024 AND bytes_kb < 1024, bytes_kb, bytes_kb >= 1024 AND bytes_mb < 1024, bytes_mb, bytes_mb >= 1024, bytes_gb) | eval bytes_unit = case($bytes$ < 1024, "b", $bytes$ >= 1024 AND bytes_kb < 1024, "KB", bytes_kb >= 1024 AND bytes_mb < 1024, "MB", bytes_mb >= 1024, "GB")
iseval = 0

[cluster_list]
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="cluster" | dedup Cluster_Name | table Cluster_Name
iseval = 0

[cluster_overview(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name="$cluster$" namespace="statistics" stats.key="ifs.bytes.avail" OR stats.key="ifs.bytes.used" OR stats.key = "ifs.percent.used"  OR stats.key="node.ifs.bytes.in.rate" OR stats.key="node.ifs.bytes.out.rate" OR stats.key="node.net.ext.bytes.out.rate" OR stats.key="node.net.ext.bytes.in.rate" OR stats.key="cluster.cpu.user.max" OR stats.key="cluster.cpu.sys.max" OR stats.key="node.clientstats.connected.*" OR stats.key="ifs.ssd.bytes.free" OR stats.key="ifs.ssd.bytes.used" stats.value=* Cluster_Name=* stats.devid=* 
iseval = 0

[events_list(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name=$cluster$ namespace="event" |  eval "Start Time" = strftime('events.start', "%d/%m/%Y %I:%M:%S %p") | eval Scope = case('events.devid'=0, "Cluster", 'events.devid'>0, "Node " + 'lnn')
iseval = 0

[isilon_index]
definition = index=isilon
iseval = 0

[node_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name="$cluster$" namespace="statistics" stats.key = "node.disk.name.*" OR stats.key="node.ifs.bytes.free" OR stats.key="node.ifs.bytes.used" OR stats.key="node.ifs.bytes.total" OR stats.key="node.ifs.ssd.bytes.free" OR stats.key="node.ifs.ssd.bytes.used" OR stats.key="node.ifs.bytes.in.rate" OR stats.key="node.ifs.bytes.out.rate" OR stats.key="node.net.ext.bytes.out.rate" OR stats.key="node.net.ext.bytes.in.rate" OR stats.key="node.sensor.volt.volts.*" OR stats.key="node.sensor.temp.celsius.*" OR stats.key="node.memory.free" OR stats.key="node.memory.used" OR stats.key="node.uptime" OR stats.key="node.cpu.sys.max" OR stats.key="node.cpu.user.max" stats.devid=* stats.value=* lnn=*  | eval Node_ID="Node".'lnn'
iseval = 0

[cache_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name = "$cluster$" namespace="statistics" stats.key = "node.ifs.cache.l2.data.prefetch.hit" OR stats.key = "node.ifs.cache.oldest_page_age" OR stats.key = "node.ifs.cache.l2.data.read.hit" OR stats.key = "node.ifs.cache.l2.data.read.miss" OR stats.key = "node.ifs.cache.l2.data.read.wait" stats.value=* stats.devid=* lnn=* | eval Node_ID="Node".'lnn'
iseval = 0

[protocol_based_client_connections(2)]
args = cluster,protocol
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="statistics" Cluster_Name="$cluster$"  stats.key="node.clientstats.active.$protocol$" OR stats.key="node.clientstats.connected.$protocol$" | eval Type=case('stats.key'="node.clientstats.active."."$protocol$","Active",'stats.key'="node.clientstats.connected."."$protocol$","Connected") | timechart span=2m max(stats.value) AS Connection by Type | fields - NULL
iseval = 0

[file_system_performance_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name="$cluster$" namespace="statistics" stats.key = "node.ifs.bytes.*.rate"  OR stats.key="node.ifs.heat.*.total" stats.value=* stats.devid=* lnn=*
iseval = 0

[protocol_based_operation_rate(2)]
args = cluster,protocol
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="statistics" Cluster_Name="$cluster$"  stats.key="cluster.protostats.$protocol$.total" | rename "stats.value{}.op_rate" AS Operational_Rate | timechart span=2m avg(Operational_Rate) AS "Operation Rate" | fields - NULL
iseval = 0

[protocol_based_latency(2)]
args = cluster,protocol
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="statistics" Cluster_Name="$cluster$" stats.key="cluster.protostats.$protocol$.total" | rename "stats.value{}.time_avg" AS Average_Time | eval Time_In_Second = round((Average_Time)/1000000,3) | timechart span=2m avg(Time_In_Second) AS "Latency" | fields - NULL
iseval = 0

[protocol_based_iops(2)]
args = cluster,protocol
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="statistics" Cluster_Name="$cluster$" stats.key="cluster.protostats.$protocol$.total" | rename "stats.value{}.in_rate" AS In_Rate,"stats.value{}.out_rate" AS Out_Rate | eval Round_In_Rate = round(In_Rate,3) | eval Round_Out_Rate = round(Out_Rate,3) | timechart span=2m avg(Round_In_Rate) AS "In Rate",avg(Round_Out_Rate) AS "Out Rate" | fields - NULL
iseval = 0


[protocol_list(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="statistics"  stats.key="cluster.protostats.*.total" Cluster_Name="$cluster$" | dedup protocol | table protocol
iseval = 0

[get_type_by_event_key]
definition = eval Type=case('key'="node.ifs.heat.write.total","Write",'key'="node.ifs.heat.read.total","Read",'key'="node.ifs.heat.lookup.total","Lookup",'key'="node.ifs.heat.rename.total","Rename",'key'="node.ifs.heat.link.total","Link",'key'="node.ifs.heat.unlink.total","Unlink",'key'= "node.ifs.heat.getattr.total","GetAttr",'key'="node.ifs.heat.setattr.total","SetAttr",'key' = "node.ifs.heat.lock.total", "Locked", 'key' = "node.ifs.heat.blocked.total", "Blocked", 'key' = "node.ifs.heat.contended.total", "Contended", 'key' = "node.ifs.heat.deadlocked.total", "Deadlocked")
iseval = 0

[get_file_system_standard_events]
definition = search key="node.ifs.heat.write.total" OR key="node.ifs.heat.read.total" OR key="node.ifs.heat.lookup.total" OR key="node.ifs.heat.rename.total" OR key="node.ifs.heat.link.total" OR key="node.ifs.heat.unlink.total" OR key="node.ifs.heat.getattr.total" OR key="node.ifs.heat.setattr.total"
iseval = 0

[get_file_system_critical_events]
definition = search key = "node.ifs.heat.lock.total" OR key = "node.ifs.heat.blocked.total" OR key = "node.ifs.heat.contended.total" OR key = "node.ifs.heat.deadlocked.total"
iseval = 0

[get_cluster_version_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name = $cluster$ namespace="cluster" | dedup onefs_version.build | table onefs_version.build,onefs_version.release, onefs_version.revision, onefs_version.type |  rename onefs_version.build AS Build onefs_version.release AS Release onefs_version.revision AS Revision onefs_version.type AS Type
iseval = 0

[access_zone_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name="$cluster$" namespace = "zones" | stats latest(zones.name) as Name, latest(zones.path) as Path, latest(zones.syslog_forwarding_enabled) as "Log Fwd Enabled", latest(zones.system_provider) as "System Provider", latest(zones.cache_size) as "Cache Size", latest(zones.all_auth_providers) as "All Auth Provider", latest(zones.alternate_system_provider) as "Alternate System Provider", latest(zones.hdfs_authentication) as "HDFS Auth"  by zones.zone_id | rename zones.zone_id AS ID
iseval = 0

[storage_tiers_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" Cluster_Name="$cluster$" namespace = "storagepool" storagepools.type=tier | stats latest(storagepools.name) as Name, latest(storagepools.usage.avail_bytes) as avail_bytes,  latest(storagepools.usage.total_bytes) as total_bytes, latest(storagepools.usage.avail_ssd_bytes) as avail_ssd_bytes, latest(storagepools.usage.total_ssd_bytes) as total_ssd_bytes, latest(storagepools.usage.virtual_hot_spare_bytes) as virtual_hot_spare_bytes by storagepools.id | rename storagepools.id AS ID | eval "Disk Used %" = round(('total_bytes' - 'virtual_hot_spare_bytes' - 'avail_bytes')*100/('total_bytes' - 'virtual_hot_spare_bytes'),2)  | `bytes_to_gb_tb_pb('total_bytes')` | eval "Total Disk" = bytes . bytes_unit | eval "SSD Used %" = ifnull(round(('total_ssd_bytes' - 'avail_ssd_bytes') *100/'total_ssd_bytes',2),0) | `bytes_to_gb_tb_pb('total_ssd_bytes')` | eval "Total SSD" = bytes . bytes_unit | `bytes_to_gb_tb_pb('virtual_hot_spare_bytes')` | eval "Virtual Hot Spare" = bytes . bytes_unit | table ID Name  "Disk Used %" "Total Disk" "Virtual Hot Spare" "SSD Used %" "Total SSD"
iseval = 0

[node_pools_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace = "storagepool" Cluster_Name = "$cluster$" | stats latest(nodepools.name) as Name, latest(nodepools.tier) as Tier, latest(nodepools.protection_policy) as "Protection Policy", latest(nodepools.l3_status) as "L3 Status", latest(nodepools.usage.avail_bytes) as avail_bytes, latest(nodepools.usage.total_bytes) as total_bytes, latest(nodepools.usage.avail_ssd_bytes) as avail_ssd_bytes, latest(nodepools.usage.total_ssd_bytes) as total_ssd_bytes, latest(nodepools.usage.virtual_hot_spare_bytes) as virtual_hot_spare_bytes by nodepools.id | rename nodepools.id AS ID | eval "Disk Used %" = round(('total_bytes' - 'virtual_hot_spare_bytes' - 'avail_bytes')*100/('total_bytes' - 'virtual_hot_spare_bytes'),2) | `bytes_to_gb_tb_pb('total_bytes')` | eval "Total Disk" = bytes . bytes_unit | eval "SSD Used %" = ifnull(round(('total_ssd_bytes' - 'avail_ssd_bytes') *100/'total_ssd_bytes',2),0) | `bytes_to_gb_tb_pb('total_ssd_bytes')` | eval "Total SSD" = bytes . bytes_unit | `bytes_to_gb_tb_pb('virtual_hot_spare_bytes')` | eval "Virtual Hot Spare" = bytes . bytes_unit |  table ID Name Tier "Protection Policy" "L3 Status"   "Disk Used %" "Total Disk" "Virtual Hot Spare" "SSD Used %" "Total SSD"
iseval = 0

[license_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest"  namespace="license" Cluster_Name = "$cluster$"  |dedup licenses.name|  eval "Expiry Date" = strftime('licenses.expiration', "%d/%m/%Y %I:%M:%S %p") | table licenses.name licenses.status  licenses.duration "Expiry Date" | rename licenses.name AS "License Name" licenses.status  AS Status licenses.duration AS Duration | fillnull  value="N/A"
iseval = 0

[disk_details(1)]
args = cluster
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="statistics" Cluster_Name="$cluster$"  stats.devid=* lnn=* stats.value=* stats.key ="node.disk.name.*"
iseval = 0

[node_statistics(1)]
args = cluster
definition = inputlookup ClusterStatsLookup | rename Health AS Status lnn  AS ID  | search Cluster_Name="$cluster$" Status!=null | lookup NodeHealthLookup Status AS Status output Health AS Health | `bytes_to_kb_mb_gb('In b/s')` | eval "In b/s" = bytes . " " .bytes_unit | `bytes_to_kb_mb_gb('Out b/s')` | eval "Out b/s" = bytes . " " .bytes_unit | `bytes_to_kb_mb_gb('Total b/s')` | eval "Total b/s" = bytes . " " .bytes_unit | `bytes_to_gb_tb_pb('HDD Size')` | eval "HDD Size" = bytes . " " .bytes_unit |`bytes_to_gb_tb_pb('HDD Used')` | eval "HDD Used" = bytes . " " .bytes_unit | eval 'HDD Used %' = round('HDD Used %',2) |  `bytes_to_gb_tb_pb('SSD Size')` | eval "SSD Size" = bytes . " " .bytes_unit | `bytes_to_gb_tb_pb('SSD Used')` | eval "SSD Used" = bytes . " " .bytes_unit | eval 'SSD Used %' = round('SSD Used %',2) | table ID, Health,"Uptime", "In b/s","Out b/s", "Total b/s", "HDD Size", "HDD Used", "HDD Used %", "SSD Size", "SSD Used", "SSD Used %"
iseval = 0

[seconds_to_time(1)]
args = seconds
definition = eval temp_time=tostring($seconds$, "duration") | eval days=if(like('temp_time',"%+%"),mvindex(split(temp_time,"+"),0),null) | eval time=if(like('temp_time',"%+%"),mvindex(split(temp_time,"+"),1),mvindex(split(temp_time,"+"),0)) | eval hr=mvindex(split(time,":"),0) | eval min=mvindex(split(time,":"),1) | eval Time= if(isnull(days),'hr'." Hours ".'min'." Minutes ",'days'." Days ".'hr'." Hours")
iseval = 0

[user_quota_details(2)]
args = cluster,time
definition = search `isilon_index` sourcetype="emc:isilon:rest" namespace="quota" Cluster_Name="$cluster$" earliest=$time$ "quota" "resume" "linked" | fields *
iseval = 0
