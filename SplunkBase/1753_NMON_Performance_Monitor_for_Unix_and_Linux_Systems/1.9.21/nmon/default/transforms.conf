# transforms.conf

###########################################
#			nmon data stanza
###########################################

# Host override based on event data form nmon_data sourcetype

[nmon_data_hostoverride]
DEST_KEY = MetaData:Host
REGEX = ^\"{0,1}[a-zA-Z0-9\_]+\"{0,1},\"{0,1}[a-zA-Z0-9\-\_\.]+\"{0,1},\"{0,1}([a-zA-Z0-9\-\_\.]+)\"{0,1},.+
FORMAT = host::$1

# New with 1.2.55, allows the perf data generation in json mode
# rewrite the sourcetype to regular nmon_data

[nmon_data_json_hostoverride]
DEST_KEY = MetaData:Host
REGEX = \"hostname\":\s\"([a-zA-Z0-9\-\_\.]+)\"
FORMAT = host::$1

[nmon_data_json_sourcetypeoverride]
DEST_KEY = MetaData:Sourcetype
REGEX = .*
FORMAT = sourcetype::nmon_data

# the following stanza will create **indexed time** fields, to be used when choosing the KV search time extraction only (data from syslog with nmon-logger)
# creating fields at indexing time is usually not recommended and not necessary
# however, we want to be able to use the tstats command over some basic fields including Splunk meta but as well the basic fields in Nmon context: OStype, type

[nmon_data_kv_createindexed_OStype]
REGEX = \sOStype=\"(?<OStype>[^\"]*)\"
WRITE_META = true
FORMAT = OStype::$1
DEFAULT_VALUE = NULL

[nmon_data_kv_createindexed_type]
REGEX = \stype=\"(?<type>[^\"]*)\"
WRITE_META = true
FORMAT = type::$1
DEFAULT_VALUE = NULL

# the following stanza will create **indexed time** fields, to be used when choosing the json search time extraction only
# creating fields at indexing time is usually not recommended and not necessary
# however, we want to be able to use the tstats command over some basic fields including Splunk meta but as well the basic fields in Nmon context: OStype, type

[nmon_data_json_createindexed_OStype]
REGEX = \"OStype\":\s\"(?<OStype>[^\"]*)\"
WRITE_META = true
FORMAT = OStype::$1
DEFAULT_VALUE = NULL

[nmon_data_json_createindexed_type]
REGEX = \"type\":\s\"(?<type>[^\"]*)\"
WRITE_META = true
FORMAT = type::$1
DEFAULT_VALUE = NULL

###########################################
#			nmon config stanza
###########################################

# Host override based on event data form nmon_config sourcetype

[nmon_config_hostoverride]
DEST_KEY = MetaData:Host
REGEX = CONFIG\,[a-zA-Z0-9\-\:\.]+\,([a-zA-Z0-9\-\_\.]+)\,[a-zA-Z0-9\-\_\.]+
FORMAT = host::$1

###########################################
#			CIM various
###########################################

[inventory_network_interface]
REGEX = BBB\w*,[^,]*,ifconfig,\"(?<interface>[a-zA-Z]{1,}\d{1,})
FORMAT = interface::$1
MV_ADD = true

[inventory_network_ip]
REGEX = BBB\w*,[^,]*,ifconfig,\"\sinet\s(?:addr:)?(?<ip>[\d|\.]*)\s
FORMAT = ip::$1
MV_ADD = true

# Linux only
[inventory_network_mac]
REGEX = BBB\w*,[^,]*,ifconfig,\".*HWaddr\s([0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2})
FORMAT = mac::$1
MV_ADD = true

###########################################
#			lookups stanza
###########################################

# NMON Inventory Lookup Table

[nmon_inventory]
external_type = kvstore
collection = kv_nmon_inventory
fields_list = hostname, OStype, OSversion, Physical_mem_MB, Virtual_mem_MB, AIX_Machine_SerialNumber, AIX_virtualcpus, AIX_logicalcores, AIX_entitled, AIX_LEVEL, AIX_processor_mode, AIX_processor_clockspeed, AIX_cpu_type, AIX_kernel_type, AIX_plateform_firmware_level, AIX_PoolID, AIX_system_installed_CPUs, AIX_system_active_CPUs, AIX_PoolCPUs, AIX_memory_MB, AIX_pagingspace_MB, Linux_memory_MB, Linux_swap_MB, Linux_distribution, Linux_vendor, Linux_kernelversion, Solaris_version, Solaris_sunOS_version, Solaris_processor_clockspeed, Solaris_physical_memory_MB, Processor, cpu_cores, nmon_version, uptime_seconds, uptime_duration, system_startup_date, reporting_date

# NMON Data Dictionary
[data_dictionary]
filename = data_dictionary.csv

# NMON Data Asset description
[nmon_data_asset_description]
filename = data_asset_description.csv

# NMON File Systems Excluding: Prevents alerting from reporting FS usage excess for non relevant device (cdrom media...)
[filesystem_excluding]
filename = filesystem_excluding.csv
case_sensitive_match=false
match_type = WILDCARD(device)

# NMON metric catalog
# this lookup table contains the metric catalog definition, to be used by several interfaces to dynamically define metrics parameters
[nmon_metric_catalog]
filename = nmon_metric_catalog.csv

# NMON hosts by day
# This lookup is a very simple lookup table used to store the state of the number of hosts known to the Nmon application
# We use this lookup in the "Hosts with data within last 7 days" reports for optimization purposes
# Instead of searching for the last 7 days of data, each day slice (but the current day) is retrieved from the lookup
[nmon_hosts_last_7days]
external_type = kvstore
collection = kv_nmon_hosts_last_7days
fields_list = _key, _time, dcount

#
# ALERTING MANAGEMENT
#

### Threshold and exclusion management:

# nmon alerting threshold template management
[nmon_alerting_threshold_template]
external_type = kvstore
collection = kv_nmon_alerting_threshold_template
fields_list = _key, frameID, alert_cpu_max_percent, alert_cpu_min_time_seconds, alert_physical_memory_max_percent, alert_physical_memory_min_time_seconds, alert_virtual_memory_max_percent, alert_virtual_memory_min_time_seconds

# nmon alerting threshold management
[nmon_alerting_threshold]
external_type = kvstore
collection = kv_nmon_alerting_threshold
fields_list = _key, frameID, serialnum, host, alert_cpu_max_percent, alert_cpu_min_time_seconds, alert_physical_memory_max_percent, alert_physical_memory_min_time_seconds, alert_virtual_memory_max_percent, alert_virtual_memory_min_time_seconds

# nmon alerting threshold template management for file-systems
[nmon_alerting_threshold_template_filesystem]
external_type = kvstore
collection = kv_nmon_alerting_threshold_template_filesystem
fields_list = _key, frameID, mount, alert_fs_max_percent, alert_fs_min_time_seconds
case_sensitive_match=false
match_type = WILDCARD(mount)

# nmon alerting threshold management for file-systems
[nmon_alerting_threshold_filesystem]
external_type = kvstore
collection = kv_nmon_alerting_threshold_filesystem
fields_list = _key, frameID, serialnum, host, mount, alert_fs_max_percent, alert_fs_min_time_seconds
case_sensitive_match=false
match_type = WILDCARD(mount)

# File systems excluding for file systems usage alerting
# 3 collections are available:
# - nmon_alerting_filesystem_global_exclusion: will be applied for all systems to exclude file systems
# - nmon_alerting_filesystem_template_exclusion: will be applied for matched systems to exclude file systems
# - nmon_alerting_filesystem_per_server_exclusion: file system exclusion on per server basis

[nmon_alerting_filesystem_global_exclusion]
external_type = kvstore
collection = kv_nmon_alerting_filesystem_global_exclusion
fields_list = _key, mount, exclude
case_sensitive_match=false
match_type = WILDCARD(mount)

[nmon_alerting_filesystem_template_exclusion]
external_type = kvstore
collection = kv_nmon_alerting_filesystem_template_exclusion
fields_list = _key, frameID, mount, exclude
case_sensitive_match=false
match_type = WILDCARD(mount)

[nmon_alerting_filesystem_per_server_exclusion]
external_type = kvstore
collection = kv_nmon_alerting_filesystem_per_server_exclusion
fields_list = _key, frameID, serialnum, host, mount, exclude
case_sensitive_match=false
match_type = WILDCARD(mount)

# NMON usual usage for main system metrics, known as the Nmon baseline
# Note: Why multiple collection ? Initially, the first baseline implementation was based on one unique collection
# But data of volume to manage is terribly high to generate the baseline, that's why i've decided to split the baseline into multiple to allow
# using existing data models

[nmon_baseline_CPU_ALL]
external_type = kvstore
collection = kv_nmon_baseline_CPU_ALL
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_cpu, baseline_avg_cpu, upper_baseline_avg_cpu

[nmon_baseline_LPAR]
external_type = kvstore
collection = kv_nmon_baseline_LPAR
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_vp_usage, baseline_avg_vp_usage, upper_baseline_avg_vp_usage, lower_baseline_avg_pool_usage, baseline_avg_pool_usage, upper_baseline_avg_pool_usage

[nmon_baseline_MEM]
external_type = kvstore
collection = kv_nmon_baseline_MEM
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_real_mem, baseline_avg_real_mem, upper_baseline_avg_real_mem, lower_baseline_avg_virtual_mem, baseline_avg_virtual_mem, upper_baseline_avg_virtual_mem

[nmon_baseline_DISKXFER]
external_type = kvstore
collection = kv_nmon_baseline_DISKXFER
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_disk_iops, baseline_avg_disk_iops, upper_baseline_avg_disk_iops

[nmon_frameID_mapping]
external_type = kvstore
collection = kv_nmon_frameID_mapping
fields_list = _key, serialnum, frameID, host, host_description

###########################################
#			SA-Eventgen
###########################################

# All these stanza are related to Eventgen configuration, for App testing purposes, Evengen will generate various sample data
# These settings can be safety ignored in Production systems as they will never affect anything as long as Eventgen inputs are not activated

[AIX_CPU_ALL_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,User_PCT,Sys_PCT,Wait_PCT,Idle_PCT,Busy,PhysicalCPUs

[AIX_LPAR_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,PhysicalCPU,virtualCPUs,logicalCPUs,poolCPUs,entitled,weight,PoolIdle,"usedAllCPU_PCT","usedPoolCPU_PCT",SharedCPU,Capped,"EC_User_PCT","EC_Sys_PCT","EC_Wait_PCT","EC_Idle_PCT","VP_User_PCT","VP_Sys_PCT","VP_Wait_PCT","VP_Idle_PCT",Folded,"Pool_id"

[AIX_MEM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,"Real_Free_PCT","Virtual_free_PCT","Real_free_MB","Virtual_free_MB","Real_total_MB","Virtual_total_MB"

[Linux_CPU_ALL_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,User_PCT,Sys_PCT,Wait_PCT,Idle_PCT,Busy,CPUs

[Linux_MEM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,memtotal,hightotal,lowtotal,swaptotal,memfree,highfree,lowfree,swapfree,memshared,cached,active,bigfree,buffers,swapcached,inactive

[Linux_TOP_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,logical_cpus,virtual_cpus,ZZZZ,interval,snapshots,PID,pct_CPU,pct_Usr,pct_Sys,Size,ResSet,ResText,ResData,ShdLib,MinorFault,MajorFault,Command

[Solaris_CPU_ALL_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,User_PCT,Sys_PCT,Wait_PCT,Idle_PCT,Busy_PCT,CPUs

[Solaris_MEM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,memtotal,NA1,NA2,swaptotal,memfree,NA3,NA4,swapfree,swapused

[Solaris_TOP_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,"logical_cpus","virtual_cpus",ZZZZ,interval,snapshots,PID,"pct_CPU","pct_Usr","pct_Sys",Threads,Size,ResSize,ResData,CharIO,"pct_RAM",Paging,Command,Username,Project,Zone,USR,SYS,TRP,TFL,DFL,LCK,SLP,LAT

[Solaris_WLM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,interval,snapshots,ZZZZ,device,value

[DISKXFER_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,interval,snapshots,ZZZZ,device,value

##############################################
#			SYSLOG SPECIAL SECTIONS
##############################################

# These parameters are dedicated to the deployment of Nmon using syslog as the transport layer
# You can forward Nmon Performance data from your servers to your central syslog server(s), and finally to Splunk

# In a Syslog deployment, we will generate data key=value data instead of standard csv data
# Additionally, using Syslog as the transport layer requires specific operation on data at indexing time.

# Deploying Nmon with syslog requires additional configuration on search heads, and potentially indexers
# This also requires specific configuration on end clients (syslog config, cron config, logrotate)

# See the README file at the root if this package, or read the online guide for Syslog deployment:

# Rewrite sourcetype after the parsing at indexing time will have been proceeded by Splunk
# This prevents from applying unwanted parameters and ensure
# timestamp identification is done over Nmon events, and not on syslog metadata that can potentially not be accurate.

# ***You must respect** these following configuration in your syslog related deployment
# the pattern used within each REGEX must match the syslog $programname 

# the $programname is being used to filter syslog data coming from syslog hosts, and finally recompose solid files on syslog collectors
# Any change to the $programname in syslog configuration without customizing these stanza will result in data not being recognized and correctly
# identified in Splunk.

# This is a copy of the default Splunk host rewrite stanza for syslog data
[syslog-host]
DEST_KEY = MetaData:Host
REGEX = :\d\d\s+(?:\d+\s+|(?:user|daemon|local.?)\.\w+\s+)*\[?(\w[\w\.\-]{2,})\]?\s
FORMAT = host::$1

[nmon_data_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_performance:\s
FORMAT = sourcetype::nmon_data

[nmon_config_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_config:\s
FORMAT = sourcetype::nmon_config

[nmon_collect_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_collect:\s
FORMAT = sourcetype::nmon_collect

[nmon_processing_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_processing:\s
FORMAT = sourcetype::nmon_processing

[nmon_clean_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_clean:\s
FORMAT = sourcetype::nmon_clean

##############################################
#			SPLUNK HEC SPECIAL SECTIONS
##############################################

### nmon_data ###

# nmon_data host
[nmon_data_fromhttp_rewrite_host]
DEST_KEY = MetaData:Host
REGEX = hostname=\"([^\"]*)\"
FORMAT = host::$1

# nmon_data source
[nmon_data_fromhttp_rewrite_source]
DEST_KEY = MetaData:Source
REGEX = .*
FORMAT = source::perfdata:http

# nmon_data sourcetype
[nmon_data_fromhttp_rewrite_sourcetype]
DEST_KEY = MetaData:Sourcetype
REGEX = .*
FORMAT = sourcetype::nmon_data

### nmon_config ###

[nmon_config_fromhttp_rewrite_host]
DEST_KEY = MetaData:Host
REGEX = host=\"{0,}([a-zA-Z0-9\-\_\.]+)\"{0,}
FORMAT = host::$1

# nmon_config source
[nmon_config_fromhttp_rewrite_source]
DEST_KEY = MetaData:Source
REGEX = .*
FORMAT = source::configdata:http

# nmon_config sourcetype
[nmon_config_fromhttp_rewrite_sourcetype]
DEST_KEY = MetaData:Sourcetype
REGEX = .*
FORMAT = sourcetype::nmon_config
