[tcpdump_output_1_udp]
#REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<transaction_id>\d+)(?<dns_flags1>[^ ]*)\s+(?<tcpdump_string>.*)$
REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<transaction_id>\d+)(?<dns_flags1>[\*\-\+\|]*)\s+(?<tcpdump_string>.*)$
[tcpdump_output_1_tcp_1]
#REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<dns_tcp>Flags) \[.* length \d+ (?<transaction_id>\d+)(?<dns_flags1>[^ ]*)\s+(?<tcpdump_string>.*)$
#REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<dns_tcp>Flags) \[.* length \d+ (?<transaction_id>\d{1,5})(?<dns_flags1>[^ ]*)\s+(?<tcpdump_string>.*)$
REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<dns_tcp>Flags) \[.* length \d+ (?<transaction_id>\d{1,5})(?<dns_flags1>[\*\-\+\|]*)\s+(?<tcpdump_string>.*)$

[tcpdump_output_1_tcp_2]
# sometimes length (37) are concated together with dns_id (30774) - observed with tcpdump version 4.9.2 + libpcap version 1.5.3 on MWG 9.1.0, 8.2.4, 4.7.4/1.4.0 (MWG 7.8.0), 4.9.2/1.5.2 centos 7.6.1810
# works correctly on debian10 tcpdump 4.9.3, libpcap 1.8.1
# 2020-03-06 09:58:06.720052 IP 192.168.233.90.46613 > 8.8.8.8.53: Flags [P.], seq 1:38, ack 1, win 42340, length 3730774+ [1au] A? web.de. (35)
# 2020-03-06 09:58:06.736076 IP 8.8.8.8.53 > 192.168.233.90.46613: Flags [P.], seq 1:70, ack 38, win 64240, length 6930774$ 2/0/1 A 10.165.230.xx, A 10.165.229.xxx (67)
# use heuristic to separate length from dns_id depending on (length) at the end of the line: strip first two digits if length=~\d\d and three digists if length=~\d\d\d
REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<dns_tcp>Flags) \[.* length \d\d(?<transaction_id>\d+)(?<dns_flags1>[^ ]*)\s+(?<tcpdump_string>.*\(\d\d\))$

[tcpdump_output_1_tcp_3]
REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<dns_tcp>Flags) \[.* length \d\d\d(?<transaction_id>\d+)(?<dns_flags1>[^ ]*)\s+(?<tcpdump_string>.*\(\d\d\d\))$

[tcpdump_output_1_tcp_4]
REGEX=IP6? (?<s_ip>[\d\.:abcdef]+)\.(?<s_port>\d+) > (?<d_ip>[\d\.:abcdef]+)\.(?<d_port>\d+): (?<dns_tcp>Flags) \[.* length \d\d\d\d(?<transaction_id>\d+)(?<dns_flags1>[^ ]*)\s+(?<tcpdump_string>.*\(\d\d\d\d\))$


[tcpdump_output_2_dns_len]
SOURCE_KEY=tcpdump_string
REGEX= \((?P<dns_len>\d+)\)$

[tcpdump_output_3_answer_count]
SOURCE_KEY=tcpdump_string
REGEX=\D*(?P<answer_count>\d+)/(?P<authority_answer_count>\d+)/(?P<additional_answer_count>\d+)\s

[tcpdump_output_4_get_response_1]
SOURCE_KEY=tcpdump_string
REGEX=\d+/\d+/\d+\s+(?<response>[^\(]+)\s+\(\d

[tcpdump_output_5_parse_response_1]
SOURCE_KEY=response
REGEX=([A-Z]+)\s+([^,]+)
FORMAT = $1::$2
MV_ADD = true

[tcpdump_output_6_get_flags_1]
SOURCE_KEY=tcpdump_string
REGEX=^(?<reply_code>[A-Z][a-zA-Z]+[a-z]+)(?<dns_flags>[^ a-zA-Z]+)?\s+

[tcpdump_output_7_get_anomalies]
SOURCE_KEY=tcpdump_string
REGEX=\s+\[(?<dns_anomalies>[^\]]+)\]\s+

[tcpdump_output_8_get_query]
SOURCE_KEY=tcpdump_string
REGEX=(?<record_type>[A-Z]+)\?\s+(?<query>[^ ]+)\.\s












