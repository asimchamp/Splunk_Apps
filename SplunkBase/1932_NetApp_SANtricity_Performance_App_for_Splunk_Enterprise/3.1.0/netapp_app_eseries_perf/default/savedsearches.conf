[Update Controller Map]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 * * * *
description = Fetch the list of controllers from the objectBundle
dispatch.earliest_time = -2h@h
dispatch.latest_time = now
run_on_startup = true
enableSched = 1
search = `get_nesa_index` sourcetype=eseries:graph | stats first(_raw) AS _raw by host | spath path=sa.saData.storageArrayLabel output=arrayName | eval arrayName=if(arrayName=="", "Unnamed-".mvindex(split(host, "-"), 0), arrayName) | spath sa.saData.needsAttention output=needsAttention | spath controller{}.controllerRef output=controllerRef | spath controller{}.physicalLocation.slot output=physicalLocation_slot | eval tmp = mvzip(controllerRef,physicalLocation_slot) | stats count by host, arrayName,needsAttention,tmp | eval controllerRef = mvindex(split(tmp,","),0) | eval physicalLocation_slot = mvindex(split(tmp,","),1) | fields - tmp | eval controllerLabel=arrayName . " " . ltrim(tostring(tonumber('physicalLocation_slot' + 9), "hex"), "0x") | table host, arrayName, controllerRef, controllerLabel,needsAttention | rename host AS arrayId | outputlookup nesa_controllers

[Update Volume Groups/Pools Map]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 * * * *
description = Fetch the list of volume groups/pools from the objectBundle
dispatch.earliest_time = -2h@h
dispatch.latest_time = now
run_on_startup = true
enableSched = 1
search = `get_nesa_index` sourcetype=eseries:graph | stats first(_raw) AS _raw by host | spath path=sa.saData.storageArrayLabel output=arrayName | eval arrayName=if(arrayName=="", "Unnamed-".mvindex(split(host, "-"), 0), arrayName) | `expand_json_array(volumeGroup)` | table host, arrayName, id, label | rename host AS arrayId, label AS volumeGroup, id AS volumeGroupRef | outputlookup nesa_volume_groups

[Update Component Map]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 * * * *
description = Fetch the list of ArrayID, Name and ComponentType from the objectBundle
dispatch.earliest_time = -2h@h
dispatch.latest_time = now
run_on_startup = true
enableSched = 1
search = `get_nesa_index` sourcetype=eseries:mel-events | eval eventType=tostring(eventType, "hex") | table host, componentType, eventType, description | dedup host, componentType, eventType, description | outputlookup nesa_volume_groups_component

[Update Volume Map]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 * * * *
description = Fetch the list of volumes from the objectBundle
dispatch.earliest_time = -2h@h
dispatch.latest_time = now
run_on_startup = true
enableSched = 1
search = `get_nesa_index` sourcetype=eseries:graph | stats first(_raw) AS _raw by host | spath path=sa.saData.storageArrayLabel output=arrayName | eval arrayName=if(arrayName=="", "Unnamed-".mvindex(split(host, "-"), 0), arrayName) | `expand_json_array(volume)` | table host, arrayName, name, volumeRef, volumeGroupRef, currentManager | rename host AS arrayId, currentManager AS controllerRef, name AS volumeName | outputlookup nesa_volumes

[Update Drive Map]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 * * * *
description = Fetch the list of drives from the objectBundle
dispatch.earliest_time = -2h@h
dispatch.latest_time = now
run_on_startup = true
enableSched = 1
search = `get_nesa_index` sourcetype=eseries:graph | stats first(_raw) AS _raw by host | spath path=sa.saData.storageArrayLabel output=arrayName | eval arrayName=if(arrayName=="", "Unnamed-".mvindex(split(host, "-"), 0), arrayName) | spath path=tray{}.trayId output=tray_slots | spath path=tray{}.trayRef output=tray_refs | `expand_json_array(drive)` | eval driveLabel=if(isnotnull(mvfind(tray_refs, 'physicalLocation.trayRef')), mvindex(tray_slots, mvfind(tray_refs, 'physicalLocation.trayRef')) . "." . 'physicalLocation.locationPosition' . "." . 'physicalLocation.slot', "unassigned") | table host, arrayName, id, currentVolumeGroupRef, driveLabel | rename host AS arrayId, id AS diskId, currentVolumeGroupRef AS volumeGroupRef | outputlookup nesa_drives

[Update Array StorageDevices Map]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 * * * *
dispatch.earliest_time = -2h@h
dispatch.latest_time = now
run_on_startup = true
enableSched = 1
search = `get_nesa_index` sourcetype="eseries:webproxy" | dedup folderId | rename storageSystemIds{} as arrayId name as folderName | eval folderName=if(folderName=="", "Unnamed-".mvindex(split(host, "-"), 0)." Systems", folderName) | fillnull value="" arrayId  | table folderId folderName parentFolderId arrayId | mvexpand arrayId | append [ search `get_nesa_index` sourcetype="eseries:webproxy" | dedup parentFolderId | rename parentFolderId as folderId | table folderId | join type="left" folderId [ search `get_nesa_index` sourcetype="eseries:webproxy" | dedup folderId | table folderId | eval isValid="0"] | where isnull(isValid) and folderId!="__root__"  | eval arrayId="", folderName=folderId, parentFolderId="__root__"  ] | table folderId folderName parentFolderId arrayId | outputlookup nesa_folderid
