# --------------------------------------------------------------------------------

# connectionId is not unique across boots.  Use this macro in joins and field lists where we 
# want to identify unique connections.  
[CONNECTION]
definition = connectionId systemInitTimeSeconds deviceInstanceId

[ICA_TEMPLATES]
definition = (TemplateName="271_ICA_SESSION_SETUP" OR TemplateName="274_ICA_APP_LAUNCH" OR TemplateName="272_ICA_NETWORK_UPDATE" OR TemplateName="273_ICA_SESSION_UPDATE" OR TemplateName="275_ICA_APP_TERMINATE" OR TemplateName="276_ICA_SESSION_END")

[TIME_BOUNDARY_STATS]
definition = earliest(_time) as earliest_time latest(_time) as latest_time

[SEARCH_SECONDS]  
definition = eval search_seconds = latest_time - earliest_time

[EVAL_ICA_CHANNEL(1)]  
args = i 
definition =  eval c$i$=if(channelId1=$i$,c$i$+channelId1Bytes, c$i$)|eval c$i$=if(channelId2=$i$,c$i$+channelId2Bytes, c$i$)|eval c$i$=if(channelId3=$i$,c$i$+channelId3Bytes, c$i$)|eval c$i$=if(channelId4=$i$,c$i$+channelId4Bytes, c$i$)|eval c$i$=if(channelId5=$i$,c$i$+channelId5Bytes, c$i$)

[ICA_APP_NAME_FIX(1)]
args = v
definition = eval w=mvjoin($v$,"&&&&&")  | eval wo=w | replace "*&&&&&TCP" with "*" in wo | replace "ICA CGP&&&&&*" with "*" in wo | replace "ICA&&&&&*" with "*" in wo | replace "HTTPS&&&&&*" with "*" in wo | eval fixed = if(wo!="", wo, w) | eval $v$ = fixed

[ALL_TIME]
definition = earliest=0 latest=now

[JOIN_ICA_USER_NAME(1)]
args = observerId
definition = join type=inner `CONNECTION` [search index=cloudbridge observationPointId="$observerId$" `ALL_TIME` TemplateName="271_ICA_SESSION_SETUP" | fields `CONNECTION` userName ]                    

[JOIN_ICA_ALL_TIME(1)]
args = observerId
definition = join type=inner `CONNECTION` [search index=cloudbridge observationPointId="$observerId$" `ALL_TIME` `ICA_TEMPLATES` ]                    

# -------------------------------- Formatting ------------------------------------------------
[BYTES_TO_MBITS(1)]
args = b
definition = tostring($b$*8/1000000)
iseval = 0

[formatBytes(1)]
args = bytes
definition = if(abs($bytes$)>1000000000000, tostring(round($bytes$/1000000000000,1))+" TB", if(abs($bytes$)>1000000000, tostring(round($bytes$/1000000000,1))+" GB", if(abs($bytes$)>1000000, tostring(round($bytes$/1000000,1))+" MB", if(abs($bytes$)>1024, tostring(round($bytes$/1024, 1))+" KB", tostring($bytes$)+" Bytes")))) 
iseval = 0                

[formatRate(1)]
args = rate
definition = if($rate$>1000000000000, tostring(round($rate$/1000000000000, 1))+" Tbps", if($rate$>1000000000, tostring(round($rate$/1000000000,1))+" Gbps", if($rate$>1000000, tostring(round($rate$/1000000,1))+" Mbps", if($rate$>1024, tostring(round($rate$/1000,1))+" kbps", tostring(round($rate$,1))+" bps"))))
iseval = 0

[FORMAT_MB(1)]
args = v
definition = eval $v$ = $v$/1000000

[FORMAT_MS(1)]
args = ms
definition = eval $ms$ = tostring($ms$)+" ms"

[FORMAT_PERCENT(1)]
args = p
definition = fillnull $p$ | eval $p$ = tostring($p$)+"%"

#[megabyte_timechart(2)]
#args = bytes, groupby 
#definition = timechart sum(eval($bytes$/1000000)) AS s BY $groupby$ | sort -num(s)

[megabyte_timechart(2)]
args = bytes, groupby 
definition = eval mbits = $bytes$*8/1000000 | timechart per_second(mbits) AS mbps BY $groupby$ | sort -num(mbps)

# Make the value zero if "No results found."
[ZERO(1)]
args = value
definition = appendpipe [ stats count | eval $value$="no data" | where count==0 | fields - count ]

[ip2decimal(1)]
args = dotted
definition = eval v="$dotted$" | rex field=v "(?<o1>\d+).(?<o2>\d+).(?<o3>\d+).(?<o4>\d+)" | eval decimal = (o1*16777216) + (o2*65536) + (o3*256) + o4  

[decimal2ip(1)]
args = ipsi 
definition = eval ip=if($ipsi$<1,$ipsi$+2147483648,$ipsi$) | eval aaa=floor(ip/16777216) | eval bbb=floor ((ip-aaa*16777216)/65536) | eval ccc=floor((ip-(aaa*16777216+bbb*65536))/256)| eval ddd=ip-(aaa*16777216+bbb*65536+ccc*256) | eval ipv4=tostring(aaa)+"."+tostring(bbb)+"."+tostring(ccc)+"."+tostring(ddd)

# --------------- SEARCH  ------------------- 
[BW_SAVINGS_PERCENT]
definition = eval clear = decompressionClearTextDeltaBytes + compressionClearTextDeltaBytes | eval cipher = decompressionCipherTextDeltaBytes + compressionCipherTextDeltaBytes | stats sum(clear) AS clear_sum sum(cipher) AS cipher_sum | eval ratio = (clear_sum - cipher_sum) / clear_sum | eval percent = round(ratio*100, 2) | eval percent = if(percent < 0, 0, percent) | eval percent = if(percent > 99.99, 99.99, percent) | fields percent | `FORMAT_PERCENT(percent)`

[JOIN_ACCELERATED]
definition = join type=inner connectionId [search index=cloudbridge TemplateName="604_ACCELERATED"]
# --------------- SEARCH  ------------------- 

[LAN_THROUGHPUT(1)]
args = 25x_filter, partner_filter  
definition = index=cloudbridge (TemplateName="256_INGRESS" OR TemplateName="257_EGRESS") (flowId=2 OR flowId=3) $25x_filter$ | eval sent=if(flowId==2, octetDeltaCount, 0) | eval received=if(flowId==3, octetDeltaCount, 0) | eval sent = `BYTES_TO_MBITS(sent)` | eval received = `BYTES_TO_MBITS(received)` | timechart per_second(sent) AS "Send" per_second(received) AS "Receive"      

[WAN_THROUGHPUT(1)]
args = 25x_filter  
definition = index=cloudbridge (TemplateName="256_INGRESS" OR TemplateName="257_EGRESS") (flowId=1 OR flowId=4) $25x_filter$ | eval sent=if(flowId==1, octetDeltaCount, 0) | eval received=if(flowId==4, octetDeltaCount, 0) | eval sent = `BYTES_TO_MBITS(sent)` | eval received = `BYTES_TO_MBITS(received)` | timechart per_second(sent) AS "Send" per_second(received) AS "Receive"      

[VALID_RTT]
definition = roundTripTime!=0xffffffff

[LATENCY(1)]
args = 25x_filter  		
definition = index=cloudbridge (TemplateName="257_EGRESS") (flowId = 2 OR flowId=4) `VALID_RTT` $25x_filter$ | eval type = if(flowId = 4, "WAN", "LAN") | timechart avg(roundTripTime) by type

[COMPRESSION_RATIO]
definition = eval clearText = decompressionClearTextDeltaBytes + compressionClearTextDeltaBytes | eval cipherText = decompressionCipherTextDeltaBytes + compressionCipherTextDeltaBytes | stats sum(clearText) AS clearTextSum sum(cipherText) AS cipherTextSum | eval compressionRatio=round(clearTextSum / cipherTextSum, 2) | fields compressionRatio

[APP_RTOS(1)]
args = 25x_filter
definition = index=cloudbridge TemplateName="604_ACCELERATED" | join type=inner connectionId [search index=cloudbridge (TemplateName="256_INGRESS" OR TemplateName="257_EGRESS") $25x_filter$ ] |stats sum(slowRTOs) AS wan_rtos | fields wan_rtos

[AVG_WAN_LATENCY(1)]
args = 25x_filter
definition = index=cloudbridge TemplateName= "257_EGRESS" flowId = 4  `VALID_RTT`  $25x_filter$ | stats avg(roundTripTime) as avg_wan_latency | eval avg_wan_latency=round(avg_wan_latency, 2) | fields avg_wan_latency

[256_1_DISTINCT_COUNT(2)]
args = 25x_filter, field
definition = index=cloudbridge TemplateName = "256_INGRESS" flowId = 1 $25x_filter$ |stats distinct_count($field$) AS cnt | fields cnt

