[custom_index]
definition = index="observeit"

[oit_cmlog]
definition = `custom_index` sourcetype="oit_cmlog"

[oit_alerts]
definition = `custom_index` sourcetype="oit_alerts" 

[oit_cmlog_and_alerts]
definition = `custom_index` sourcetype="oit_cmlog" OR ( sourcetype="oit_alerts" )

[oit_cmlog_all_fields]
definition = `oit_cmlog` | fields _time,FirstScreenshotTime,SessionId,ClientName,ServerName,DomainName,LoginName,UserName,ApplicationName,WindowTitle,Command,OS,ViewerURL

[fillnull_all]
definition =  | fillnull value="" AlertTime,AlertID,Alert,RuleDescription,Severity,AlertDetails,AlertURL,SessionId,ClientName,ServerName,DomainName,LoginName,UserName,ApplicationName,WindowTitle,ApplicationFullPath,ProcessName,PermissionLevel,ViewerURL,CommandName,CommandArgument,UsingRootPermissionLevel,Statement,ScreenshotId,SessionDay,FirstScreenshotTime,Command,OS


[fillnull_commands]
definition = | fillnull ApplicationName WindowTitle Command CommandInvocation UserName value="N/A"

[merge_applications_and_commands]
definition = | eval ApplicationsAndCommands=mvappend(ApplicationName,"",Command) | eval ApplicationsAndCommands=mvfilter(isnotnull(ApplicationsAndCommands) AND ApplicationsAndCommands!="")


[standard_stats_for_session_list]
definition = stats min(_time) as _time max(_time) as ended values(LoginName) as LoginName values(ServerName) as ServerName values(ClientName) as ClientName values(ApplicationName) as ApplicationName values(Command) as Command values(ApplicationsAndCommands) as ApplicationsAndCommands dc(ViewerURL) as Slides last(ViewerURL) as ViewerURL values(Alert) as Alerts by SessionId, UserName 

[session_stats_for_user_detail]
definition = stats min(_time) as _time max(_time) as ended values(LoginName) as LoginName values(ServerName) as ServerName values(ClientName) as ClientName values(ApplicationName) as ApplicationName values(Command) as Command values(ApplicationsAndCommands) as ApplicationsAndCommands dc(ViewerURL) as Slides last(ViewerURL) as ViewerURL by SessionId, UserName 

[conversions_for_session_list]
definition = eval duration=round(ended-_time) | fieldformat duration=tostring(duration,"duration") | fieldformat ended=strftime(ended,"%m/%d/%y %H:%M:%S.%Q")

[fields_for_session_list]
definition = duration ApplicationsAndCommands LoginName UserName ServerName ClientName Slides SessionId ViewerURL | rename ApplicationsAndCommands as "Applications and Commands" | sort - ended

[fields_for_browse]
definition = _time SessionId ServerName UserName ClientName DomainName LoginName ApplicationName Command ViewerURL

[get_labels]
definition = eval label=case(field="Alert","Alerts",field=="SessionId","Sessions",field=="ApplicationName","Applications",field=="ClientName","Clients",field=="Command","Commands",field=="DomainName","Domains",field=="LoginName","Logins",field=="OS","OS",field=="ServerName","Servers",field=="UserName","Users") + " (" + count + ")"

[check_for_missing_sourcetypes(1)]
args = sourcetypeList
definition = tstats prestats=t count where index="observeit" GROUPBY sourcetype splunk_server | stats count by sourcetype splunk_server | eval present=1 | append     [| stats count     | fields - count     | eval sourcetype=split("$sourcetypeList$",",")     | mvexpand sourcetype     | eval present="0" | eval splunk_server="all_instances"    ] | stats max(present) as present values(splunk_server) as splunk_server by sourcetype| eventstats values(splunk_server) as instance| where present=0| stats values(sourcetype) as sourcetypes dc(sourcetype) as sourcetypeCount by instance| eval pluralized=if(sourcetypeCount>1,"sourcetypes","sourcetype") | eval instanceStr=if(instance=="all_instances","at all","on the Splunk instance(s) :" + instance) | eval sourcetypes="\"" + mvjoin(sourcetypes,"\", \"")  + "\""| eval metric=sourcetypeCount + " " + pluralized + " (" + sourcetypes + ") are not being indexed " + instanceStr | fields metric instance

