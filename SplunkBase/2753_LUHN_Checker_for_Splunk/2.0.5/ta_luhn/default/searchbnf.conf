[luhn-command]
syntax = luhn (<selfjoin-options>)*
simplesyntax = luhn compare_field="cc_number_field"
shortdesc = LUHN Algorithm check against numbers.
description = This looks at the given data and tries to determine if any potential credit card numbers exist.
usage = public
example1 = sourcetype=cc_data_source | luhn
comment1 = Take an input source and use all default options to split the data and find any potential credit card number.
example2 = sourcetype=cc_data_source field1=* | luhn input_field="field1" disable_extraction="yes"
comment2 = Take an input source and look at one possible field entry for credit card numbers with regex extraction disabled.

[luhn-options]
syntax = disable_extraction=<str> | compare_field = <str> | output_prefix = <str> | input_field = <str> | extraction_regex = <str> | ccpattern_regex = <str>
description = All parameters are optional.\
	'disable_extraction'	values: (yes|no)	default: no		Used to disable extraction functionality.\
	'input_field'			default: _raw		Field with possible credit card data.\
	'output_prefix'			default: ta_luhn_	Used to produce unique output fields.\
	'regex'		default: (?:\d[ -]*?){13,30}	When extraction is enabled, this is used to find initial matches.\
	'ccpattern_regex'		default: (?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})	The LUHN algorithm alone can produce false positives. This helps ensure the CC number passes both regex checking and LUHN checking.


