[Network Utilization > 90%]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 1
alert_condition = search MAX_BYTES > 90
counttype = custom
cron_schedule = 0 * * * *
description = Triggers when the network utilization exceeds 90%
dispatch.earliest_time = -1h
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = Savvius
request.ui_dispatch_view = search
search = sourcetype=sv_summaries host="*" Group=Network Statistic="Current Utilization (percent)"| timechart max(Bytes) as MAX_BYTES

[Packets Dropped > 10%]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.severity = 5
alert.suppress = 0
alert.track = 1
alert_condition = search PERCENT_PACKETS_DROPPED > 10
counttype = custom
cron_schedule = 0 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = now
description = Triggers when the percentage of packets dropped exceeds 10%
enableSched = 1
request.ui_dispatch_app = Savvius
request.ui_dispatch_view = search
search = | multisearch [search sourcetype=sv_summaries host="*" Statistic="Total Packets" | fields Packets | rename Packets as "Received Packets"] [search sourcetype=sv_summaries host="*" Statistic="Dropped Packets" | fields Bytes | rename Bytes as "Dropped Packets"] | eventstats sum("Received Packets") as totalReceivedPackets | eventstats sum("Dropped Packets") as totalDroppedPackets | eval totalPackets=totalReceivedPackets+totalDroppedPackets | eval percentPacketsDropped=round((totalDroppedPackets/totalPackets)*100, 2) | stats values(percentPacketsDropped) as PERCENT_PACKETS_DROPPED

[Average Application Response Time > 3 seconds]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.severity = 5
alert.suppress = 0
alert.track = 1
alert_condition = search AVERAGE_APPLICATION_RESPONSE_TIME > 3
counttype = custom
cron_schedule = 0 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = now
description = Triggers when the average application response time exceeds 3 seconds
enableSched = 1
request.ui_dispatch_app = Savvius
request.ui_dispatch_view = search
search = search sourcetype=sv_appresponse host="*" | regex "Avg Response Time"="[0-9\.:]+" | rex field="Avg Response Time" "((?<hour>[0-9]{2}){1}:(?<minute>[0-9]{2}){1}:){0,1}(?<second>[0-9]{1,2}){1}\.(?<microsecond>[0-9]{6}){1}" | fillnull value=0 hour minute second microsecond | eval art=(hour*3600)+(minute*60)+second+(microsecond/1000000) | eventstats avg(art) as "Average Response Time" | stats values("Average Response Time") as AVERAGE_APPLICATION_RESPONSE_TIME

[Average Flow Response Time > 3 seconds]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.severity = 5
alert.suppress = 0
alert.track = 1
alert_condition = search AVERAGE_FLOW_RESPONSE_TIME > 3
counttype = custom
cron_schedule = 0 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = now
description = Triggers when the average flow response time exceeds 3 seconds
enableSched = 1
request.ui_dispatch_app = Savvius
request.ui_dispatch_view = search
search = search sourcetype=sv_flows host="*" | regex "Avg Response Time"="[0-9\.:]+" | rex field="Avg Response Time" "((?<hour>[0-9]{2}){1}:(?<minute>[0-9]{2}){1}:){0,1}(?<second>[0-9]{1,2}){1}\.(?<microsecond>[0-9]{6}){1}" | fillnull value=0 hour minute second microsecond | eval art=(hour*3600)+(minute*60)+second+(microsecond/1000000) | eventstats avg(art) as "Average Response Time" | stats values("Average Response Time") as AVERAGE_FLOW_RESPONSE_TIME
