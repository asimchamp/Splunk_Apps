<dashboard>
  <label>Privileged User Monitoring</label>
  <row>
    <html>
      <h2>Background</h2>
      <p>It's important to track the activities of your most important users. When you have a noisy search, factoring in the risk of the particular user can help you prioritize events, or ignore background noise.</p>
    </html>
  </row>
  <row>
    <html>
      <h2>Key Techniques:</h2>
<p>This example leverages the following useful techniques:</p>
  <ul>
      <li>Risk: Leveraging a concept of organizational risk to prioritize events.</li>
      <li>LDAP Integration: Integrate your Splunk data with LDAP via SA-LDAPSearch</li>
      <li>eventstats: Non-destructive stats</li>
      <li>stats eval if statements: Embedding if statements allow you to have incredible control over what you are counting, averaging, distinct counting, or etc. Return null to exclude values!</li>
      <li>eval: Eval allows us to have flexible application logic, to define our user risk.</li>
      <li>tstats: Accelerated data models help turn impossible searches into easy searches.</li>
      <li>Overriding ES Correlation Search Settings: Pass in Severity, or risk fields from your correlation search, to override the severity/risk per event.</li>
      <li>Building Reliable Baselines: Excluding recent values from your baseline makes for more accurate baselines.</li>
      </ul>
    </html>
  </row>
  <row>
    <html>
      <h2>Speed Differences:</h2>
<p>When I ran this search in my lab environment, I found the following performance times:</p>
  <ul>
      <li>Raw Search: 10,904 seconds (3 hours)</li>
      <li>Tstats, leveraging only summaries (accelerated data models): 22.00 seconds (Almost 1/500th of the time!!!)</li>
      </ul>
    </html>
  </row>
  <row>
    <html>
      <h2>Part One - Unaccelerated</h2>
      <pre>
        <![CDATA[
        tag=authentication earliest=-30d@d| bucket _time span=1d | stats count by user, host, _time 
| eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") 
| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, host 
| eventstats dc(eval(if(avg>0,host,null))) as NumServersHistorically dc(eval(if(recent>0,host,null))) as NumServersRecently by user 
| eval Cause=if(isnull(avg) AND NumServersHistorically>0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersHistorically*3 < NumServersRecently, mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| where Cause!=""


]]>      </pre>
     
      <h3>Line by Line</h3>
  <pre><![CDATA[tag=authentication earliest=-30d@d| bucket _time span=1d | stats count by user, host, _time  ]]></pre>
<ul><li>What: The longest part of the search, by a huge margin. Pull back the logon activity per user, per host, per day.</li><li>Why: This is a massive search with massive cardinality, but gives us all the data we need. (This is the portion that is so much faster on the accelerated search)</li></ul>
<pre><![CDATA[| eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") ]]></pre>
<ul><li>What: Define if an event is recent or not.</li><li>Why: While this isn't explicitly required, you generally want to exclude the suspicious activity from your baseline. Particularly with standard deviation based searches, it is easy to just to stdev(daily_total) avg(daily_total). But if the most recent daily_total is substantially higher, it will impact your standard deviation and impact the reliability of the alert. It is better to pull the stdev and avg excluding your most recent data points (or whatever the window for which you're inspecting, usually the frequency with which you run the search).</li></ul>
<pre><![CDATA[| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, host ]]></pre>
<ul><li>What: Count how many logons per host, per user are typical, and how many recent ones there are.</li><li>Why: The count is all we need, since in this scenario we're just using avg and not avg + stdev. You could easily build that in as well, if you really wanted to.</li></ul>
<pre><![CDATA[| eventstats count(eval(if(avg>0,"yes",null))) as NumServersHistorically dc(eval(if(recent>0,"yes",null))) as NumServersRecently by user  ]]></pre>
<ul><li>What: Tracking for just one host limits the amount of context you can get, and leads to false positives. Let's augment this with context about the user's overall activity (differentiating between a sysadmin who logs into 50 random servers once per day, versus a user who logs just into the email server many times.</li><li>Why: Eventstats is non-destructive, in that it only augments existing results. You will maintain your existing event set, and just add this additional context about the user.</li></ul>
<pre><![CDATA[| eval Cause=if(isnull(avg) AND NumServersHistorically>0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersRecently>3 AND NumServersHistorically*3<NumServersRecently, mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| where Cause!=""]]></pre>
<ul><li>What: Apply our business logic for finding suspicious logons.</li><li>Why: This can be any logic you want to. Above I include the first time a user logs onto a server because it is a standard type of alert, and also if a user logs into 3x more servers than normal (this is where stdev would be useful). But run these searches in your environment, profile your users, and find whatever clauses work for you. Finally, we find user + host combinations where this is something abberant. </li></ul>
    </html>
  </row>
  <row>
    <panel>
      <table>
        <search>
          <query>
            <![CDATA[
tag=authentication earliest=-7d@d | bucket _time span=1d | stats count by user, host, _time 
| eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") 
| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, host 
| eventstats dc(eval(if(avg>0,host,null))) as NumServersHistorically dc(eval(if(recent>0,host,null))) as NumServersRecently by user 
| eval Cause=if(isnull(avg) AND NumServersHistorically>0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersHistorically*3 < NumServersRecently, mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| where Cause!=""
]]>
          </query>
          <earliest></earliest>
          <latest></latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <html>
      <h2>Part One - Accelerated</h2>
      <pre>
        <![CDATA[
| tstats count from datamodel=Authentication where earliest=-30d@d groupby Authentication.dest Authentication.user  _time span=1d | rename Authentication.dest as dest Authentication.user as user 
|  eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") 
| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, dest 
| eventstats count(eval(if(avg>0,"yes",null))) as NumServersHistorically count(eval(if(recent>0,"yes",null))) as NumServersRecently by user 
| eval Cause=if(isnull(avg) AND NumServersHistorically!=0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersRecently>3 AND NumServersHistorically*3<NumServersRecently,mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| where Cause!=""

]]>      </pre>
     
      <h3>Line by Line</h3>
  <pre><![CDATA[| tstats count from datamodel=Authentication where earliest=-30d@d groupby Authentication.dest Authentication.user  _time span=1d | rename Authentication.dest as dest Authentication.user as user  ]]></pre>
<ul><li>What: Enjoy the power of accelerated data models. The rest of this search is identical to the above, unaccelerated version, except this line. And this line turns a 3 hours search into a 22 second search. Pull back the logon activity per user, per host, per day.</li><li>Why: tstats are hugely powerful. Check out the 2013 conf presenation from David Marquardt on Acceleration Technologies in Splunk for more on this. </li></ul>
<pre><![CDATA[| eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") ]]></pre>
<ul><li>What: Define if an event is recent or not.</li><li>Why: While this isn't explicitly required, you generally want to exclude the suspicious activity from your baseline. Particularly with standard deviation based searches, it is easy to just to stdev(daily_total) avg(daily_total). But if the most recent daily_total is substantially higher, it will impact your standard deviation and impact the reliability of the alert. It is better to pull the stdev and avg excluding your most recent data points (or whatever the window for which you're inspecting, usually the frequency with which you run the search).</li></ul>
<pre><![CDATA[| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, host ]]></pre>
<ul><li>What: Count how many logons per host, per user are typical, and how many recent ones there are.</li><li>Why: The count is all we need, since in this scenario we're just using avg and not avg + stdev. You could easily build that in as well, if you really wanted to.</li></ul>
<pre><![CDATA[| eventstats count(eval(if(avg>0,"yes",null))) as NumServersHistorically dc(eval(if(recent>0,"yes",null))) as NumServersRecently by user  ]]></pre>
<ul><li>What: Tracking for just one host limits the amount of context you can get, and leads to false positives. Let's augment this with context about the user's overall activity (differentiating between a sysadmin who logs into 50 random servers once per day, versus a user who logs just into the email server many times.</li><li>Why: Eventstats is non-destructive, in that it only augments existing results. You will maintain your existing event set, and just add this additional context about the user.</li></ul>
<pre><![CDATA[| eval Cause=if(isnull(avg) AND NumServersHistorically>0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersRecently>3 AND NumServersHistorically*3<NumServersRecently, mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| where Cause!=""]]></pre>
<ul><li>What: Apply our business logic for finding suspicious logons.</li><li>Why: This can be any logic you want to. Above I include the first time a user logs onto a server because it is a standard type of alert, and also if a user logs into 3x more servers than normal (this is where stdev would be useful). But run these searches in your environment, profile your users, and find whatever clauses work for you. Finally, we find user + host combinations where this is something abberant. </li></ul>
    </html>
  </row>
  <row>
    <panel>
      <table>
        <search>
          <query>
            <![CDATA[
| tstats count from datamodel=Authentication where earliest=-30d@d groupby Authentication.dest Authentication.user  _time span=1d | rename Authentication.dest as dest Authentication.user as user 
|  eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") 
| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, dest 
| eventstats count(eval(if(avg>0,"yes",null))) as NumServersHistorically count(eval(if(recent>0,"yes",null))) as NumServersRecently by user 
| eval Cause=if(isnull(avg) AND NumServersHistorically!=0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersRecently>3 AND NumServersHistorically*3<NumServersRecently,mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| where Cause!=""
]]>
          </query>
          <earliest></earliest>
          <latest></latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <html>
      <h2>Part Two - Organizational Context</h2>
      <pre>
        <![CDATA[
| inputlookup LDAPSearch 
| eval risk = 1
| eval risk = case(NumWhoReportIn>100, risk+10, risk)
| eval risk = case(like(Groups, "%OU=Groups,OU=IT Security,%"), risk + 10, risk)
| eval risk = case(like(title, "VP %"), risk+10, like(title, "Chief %"), risk+100, 1=1, risk)
| fields risk sAMAccountName
| outputlookup RiskPerUser


]]>      </pre>
     
      <h3>Line by Line</h3>

<pre><![CDATA[| inputlookup LDAPSearch ]]></pre>
<ul><li>What: Pull in our LDAP data.</li><li>Why: Most organizations will have a lookup file that is periodically refreshed via an LDAP query.</li></ul>
<pre><![CDATA[| eval risk = 1]]></pre>
<ul><li>What: Initialize Risk for everyone</li><li>Why: Since we may want to use this as a multiplier, we should create an initial value for everyone. Note: People who are truly risk experts will have thoughts on whether to do multiplicative risk value or additive risk value -- feel free to adjust this to the context you would like -- I'm not a risk person, but multiplicative feels right for this situation to me.</li></ul>
<pre><![CDATA[| eval risk = case(NumWhoReportIn>100, risk+10, risk)]]></pre>
<ul><li>What: Users with many reports (direct or indirect) tend to be greater targets due to their access and importance.</li><li>Why: You won't find Number of Reports in most LDAP outputs, but it's definitely achievable. Check out the Search Activity app, and the GenerateLDAPMgmtChain saved search for an example.</li></ul>
<pre><![CDATA[| eval risk = case(like(Groups, "%OU=Groups,OU=IT Security,%"), risk + 10, risk)]]></pre>
<ul><li>What: Users who are in high priviliege groups should have higher access.</li><li>Why: Some organizations I've worked with have used the user account OU as a proxy for this.</li></ul>
<pre><![CDATA[| eval risk = case(like(title, "VP %"), risk+10, like(title, "Chief %"), risk+100, 1=1, risk)]]></pre>
<ul><li>What: Akin to the NumWhoReportIn above, VPs and CEOs/COOs/Chief Architects etc. tend to be important. You should be cautious here, if you have ridiculous titles (e.g., Splunk's "Chief Mind" or "Minister of Defense"</li></ul>
<pre><![CDATA[| fields risk sAMAccountName
| outputlookup RiskPerUser]]></pre>
<ul><li>What: Leave just our risk per user, and output to a new lookup</li><li>Why: The goal is to be able to take a username and then find the risk associated with it. Depending on the complexity of your environment, this may end up being the username, SPN, email, or other fields. </li></ul>
    </html>
  </row>
  <row>
    <panel>
      <table>
        <search>
          <query>
            <![CDATA[
| inputlookup LDAPSearch.csv
| eval risk = 1
| eval risk = case(NumWhoReportIn>10, risk+10, 1=1, risk)
| eval risk = case(like(title, "VP %"), risk+10, like(title, "CEO"), risk+30, like(title, "Security%"), risk+40, 1=1, risk)
| eval risk = case(like(dn, "%OU=Operations%"), risk+20, like(dn, "%OU=Engineering%"), risk+7, 1=1, risk)
| fields risk sAMAccountName
| sort - risk
| outputlookup RiskPerUser.csv
]]>
          </query>
          <earliest></earliest>
          <latest></latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <html>
      <h2>Part Three - Putting it Together</h2>
      <pre>
        <![CDATA[
| tstats count from datamodel=Authentication where earliest=-30d@d groupby Authentication.dest Authentication.user  _time span=1d | rename Authentication.dest as dest Authentication.user as user 
|  eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") 
| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, dest 
| eventstats count(eval(if(avg>0,"yes",null))) as NumServersHistorically count(eval(if(recent>0,"yes",null))) as NumServersRecently by user 
| eval Cause=if(isnull(avg) AND NumServersHistorically!=0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersRecently>3 AND NumServersHistorically*3<NumServersRecently,mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| stats count values(Cause) by user
| lookup RiskPerUser.csv sAMAccountName as user
| eval AggRisk = risk * count
| eval DescriptiveRisk = case(AggRisk > 100, "very high", AggRisk>30, "medium", AggRisk>5, "low", 1=1, "very low")
| rename AggRisk as risk_score
]]>      </pre>
     
      <h3>Line by Line</h3>

<pre><![CDATA[| tstats count from datamodel=Authentication where earliest=-30d@d groupby Authentication.dest Authentication.user  _time span=1d | rename Authentication.dest as dest Authentication.user as user 
|  eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") 
| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, dest 
| eventstats count(eval(if(avg>0,"yes",null))) as NumServersHistorically count(eval(if(recent>0,"yes",null))) as NumServersRecently by user 
| eval Cause=if(isnull(avg) AND NumServersHistorically!=0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersRecently>3 AND NumServersHistorically*3<NumServersRecently,mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)]]></pre>
<ul><li>See Part One.</li></ul>
<pre><![CDATA[| stats count values(Cause) by user]]></pre>
<ul><li>What: See the number of events per user</li><li>Why: We only want to create a single notable event per user.</li></ul>
<pre><![CDATA[| lookup RiskPerUser sAMAccountName as user]]></pre>
<ul><li>What: Pull in our calculated risk level.</li></ul>
<pre><![CDATA[| eval AggRisk = risk * count]]></pre>
<ul><li>What: Factor in the number of incidents with the risk of the entity.</li><li>Why: I chose multipliciative here because it feels logical for this use case, but it would be totally reasonable to choose additive, depending on how you view Risk in your organization.</li></ul>
<pre><![CDATA[| eval DescriptiveRisk = case(AggRisk > 100, "very high", AggRisk>30, "medium", AggRisk>5, "low", 1=1, "very low")]]></pre>
<ul><li>What: If you are alerting to a Non-ES system, you may wish to provide a descriptive label for the level of risk associated with that particular user.</li></ul>
<pre><![CDATA[| rename AggRisk as risk_score]]></pre>
<ul><li>What: If you use ES, you can override the default risk_score and provide your own value.</li></ul>

    </html>
  </row>
  <row>
    <panel>
      <table>
        <search>
          <query>
            <![CDATA[
| tstats count from datamodel=Authentication where earliest=-30d@d groupby Authentication.dest Authentication.user  _time span=1d | rename Authentication.dest as dest Authentication.user as user 
|  eval isRecent=if(_time>relative_time(now(),"-1d"), "yes", "no") 
| stats avg(eval(if(isRecent="no",count,null))) as avg first(count) as recent by user, dest 
| eventstats count(eval(if(avg>0,"yes",null))) as NumServersHistorically count(eval(if(recent>0,"yes",null))) as NumServersRecently by user 
| eval Cause=if(isnull(avg) AND NumServersHistorically!=0, "This is the first logon to this server", "") 
| eval Cause=if(NumServersRecently>3 AND NumServersHistorically*3<NumServersRecently,mvappend(Cause,"Substantial increase in the number of servers logged on to"), Cause)
| stats count values(Cause) by user
| lookup RiskPerUser.csv sAMAccountName as user
| eval AggRisk = risk * count
| eval DescriptiveRisk = case(AggRisk > 100, "very high", AggRisk>30, "medium", AggRisk>5, "low", 1=1, "very low")
| rename AggRisk as risk_score | sort risk_score
]]>
          </query>
          <earliest></earliest>
          <latest></latest>
        </search>
      </table>
    </panel>
  </row>
</dashboard>