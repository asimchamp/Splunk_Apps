<dashboard>
  <label>New Process Launch and Uncategorized Proxy Activity within 15 minutes of AV Event</label>
  <row>
    <html>
      <h2>Background</h2>
      <p>We all know that Anti-Virus hit rates are pretty low, particularly against advanced or novel threats. But it's a sad fact that sometimes, even when AV does hit, it will only block one or two of the vectors and not all of them. In the below example, we will search over our AV logs, proxy logs, and endpoint change logs (e.g., from sysmon, carbon black, or others) and track the events. </p>
    </html>
  </row>
  <row>
    <html>
      <h2>Key Techniques:</h2>
<p>This example leverages the following useful techniques:</p>
  <ul>
      <li>Correlation across datasets: One dataset is not always enough for a correlation rule. Up that number.</li>
      <li>Stats eval value filtering: The essential stats + eval, give you a count where field="value"</li>
      <li>Stats eval with multiple conditionals: Remember that you can use multiple conditionals via AND OR or NOT</li>
      <li>tstats: Accelerated data models help turn impossible searches into easy searches.</li>
      </ul>
    </html>
  </row>
  <row>
    <html>
      <h2>Speed Differences:</h2>
<p>When I ran this search in my lab environment, I found the following performance times:</p>
  <ul>
      <li>Raw Event Search: 21.00 seconds</li>
      <li>Tstats, leveraging summaries and unsummarized data: 2.76 seconds</li>
      <li>Tstats, leveraging only summaries (accelerated data models): 2.00 seconds</li>
      </ul>
      <p>Note that you would likely have to go with option 2 above, leveraging both summarized and unsummarized data, as there is an inherent lag in data model acceleration.</p>
    </html>
  </row>
  <row>
    <html>
      <h2>The Unaccelerated Search</h2>
      <pre>
        <![CDATA[
        [search tag=malware earliest=-20m@m latest=-15m@m | table dest | rename dest as src ] 
earliest=-20m@m (sourcetype=sysmon OR sourcetype=carbon_black eventtype=process_launch) OR (sourcetype=proxy category=uncategorized)
|  stats count(eval(sourcetype="proxy")) as proxy_events count(eval(sourcetype="carbon_black" OR sourcetype="sysmon")) as endpoint_events by src 
| where proxy_events > 0 AND endpoint_events > 0


]]>      </pre>
     
      <h3>Line by Line</h3>
  <pre><![CDATA[[search tag=malware earliest=-20m@m latest=-15m@m | table dest | rename dest as src ]  ]]></pre>
<ul><li>What: Pull back hosts that had malware events between 15 and 20 minutes ago</li><li>Why: We want to set up a 15 minute window for these searches. We could look at all AV events and then throttle based on the host (which we will do in the next example), but given the limitations of subsearches we probably want to be specific here.</li></ul>
<pre><![CDATA[earliest=-20m@m (sourcetype=sysmon OR sourcetype=carbon_black eventtype=process_launch) OR (sourcetype=proxy category=uncategorized)]]></pre>
<ul><li>What: Pull any uncategorized proxy or process launch activities over the past 20 minutes.</li><li>Why: We're now being inclusive, and looking for all the proxy activity from those subsearched hosts.</li><li>How: If we just ran our subsearch, we'd see a number of event rows that looked something like src="dveuve-workstation", src="cgilbert-workstation", etc. Those are concatenated into one string, and prepended to the main search as (src="dveuve-workstation" OR src="cgilbert-workstation").</li></ul>
<pre><![CDATA[|  stats count(eval(sourcetype="proxy")) as proxy_events count(eval(sourcetype="carbon_black" OR sourcetype="sysmon")) as endpoint_events by src ]]></pre>
<ul><li>What: Count how many events from each sourcetype</li><li>Why: For more on how stats and eval work together, visit <a href="/app/security_ninjitsu/stats_and_eval">Stats and Eval</a>.</li></ul>
<pre><![CDATA[| where proxy_events > 0 AND endpoint_events > 0 ]]></pre>
<ul><li>What: Find hosts where there are some uncategorized proxy events and new endpoint process launches</li><li>Why: Since we started by including only hosts with malware events, we can just check the proxy_events and endpoint_events fields. You might also enhance this in your organization by adding a lookup on the hashes of new process launches, to track only unusual processes.</li></ul>
    </html>
  </row>
  <row>
    <panel>
      <table>
        <search>
          <query>
            <![CDATA[
 [search tag=malware earliest=-20m@m latest=-15m@m | table dest | rename dest as src ] 
earliest=-20m@m (sourcetype=sysmon OR sourcetype=carbon_black eventtype=process_launch) OR (sourcetype=proxy category=uncategorized)
|  stats count(eval(sourcetype="proxy")) as proxy_events count(eval(sourcetype="carbon_black" OR sourcetype="sysmon")) as endpoint_events by src 
| where proxy_events > 0 AND endpoint_events > 0
]]>
          </query>
          <earliest></earliest>
          <latest></latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <html>
      <h2>The Accelerated Search</h2>
      <pre>
        <![CDATA[
| tstats prestats=t summariesonly=t count(Malware_Attacks.src) as malwarehits from datamodel=Malware where Malware_Attacks.action=allowed groupby Malware_Attacks.src 
| tstats prestats=t append=t summariesonly=t count(web.src) as webhits from datamodel=Web where web.http_user_agent="shockwave flash" groupby web.src 
| tstats prestats=t append=t summariesonly=t count(All_Changes.dest) from datamodel=Change_Analysis where sourcetype=carbon_black OR sourcetype=sysmon groupby All_Changes.dest
| rename web.src as src Malware_Attacks.src as src All_Changes.dest as src 
| stats count(Malware_Attacks.src) as malwarehits count(web.src) as webhits count(All_Changes.dest) as process_launches by src



]]>      </pre>
      <h3>Line by Line</h3>
  <pre><![CDATA[  | tstats prestats=t summariesonly=t count(Malware_Attacks.src) as malwarehits from datamodel=Malware where Malware_Attacks.action=allowed groupby Malware_Attacks.src  ]]></pre>
<ul><li>What: Pull back a count of any hosts that had malware events.</li><li>Why: Because we're not limited to on the execution time or event count by the subsearch limits, we can cast a broader net and throttle the alert (compared with the unaccelerated option above). We could, however, add an earliest=-20m@m latest=-15m@m to the where clause if we wanted to.</li></ul>
<pre><![CDATA[| tstats prestats=t append=t summariesonly=t count(web.src) as webhits from datamodel=Web where web.http_user_agent="shockwave flash" groupby web.src 
| tstats prestats=t append=t summariesonly=t count(All_Changes.dest) from datamodel=Change_Analysis where sourcetype=carbon_black OR sourcetype=sysmon groupby All_Changes.dest]]></pre>
<ul><li>What: Pull any uncategorized proxy or process launch activities.</li><li>Why: Because we're using tstats in prestats mode, we can safely append. While you can't see what those results look like (leap of faith!), think of them like using the normal append command. The only other impact of prestats=t is that we need to put a downstream stats command (two commands down).</li></ul>
<pre><![CDATA[| rename web.src as src Malware_Attacks.src as src All_Changes.dest as src  ]]></pre>
<ul><li>What: Rename the data-model-specific fields to a common name.</li><li>Why: Data Models prepend their fields with the data model name, but in order for us to correlate across multiple ones, we need to change that. Notably, we could also swap out src and dst if we needed to (e.g., Malware_Attacks.dst as src).</li></ul>
<pre><![CDATA[| stats count(Malware_Attacks.src) as malwarehits count(web.src) as webhits count(All_Changes.dest) as process_launches by src ]]></pre>
<ul><li>What: Count the number of uncategorized proxy events, new endpoint process launches, and malware hits per host.</li></ul>
<pre><![CDATA[| where proxy_events > 0 AND endpoint_events > 0 ]]></pre>
<ul><li>What: Find hosts where there are uncategorized proxy events, new endpoint process launches, and malware hits in the time window.</li></ul>
    </html>
  </row>
  <row>
    <panel>
      <table>
        <search>
          <query>
            <![CDATA[
| tstats prestats=t summariesonly=t count(Malware_Attacks.src) as malwarehits from datamodel=Malware where Malware_Attacks.action=allowed groupby Malware_Attacks.src 
| tstats prestats=t append=t summariesonly=t count(web.src) as webhits from datamodel=Web where web.http_user_agent="shockwave flash" groupby web.src 
| tstats prestats=t append=t summariesonly=t count(All_Changes.dest) from datamodel=Change_Analysis where sourcetype=carbon_black OR sourcetype=sysmon groupby All_Changes.dest
| rename web.src as src Malware_Attacks.src as src All_Changes.dest as src 
| stats count(Malware_Attacks.src) as malwarehits count(web.src) as webhits count(All_Changes.dest) as process_launches by src

]]>
          </query>
          <earliest></earliest>
          <latest></latest>
        </search>
      </table>
    </panel>
  </row>
</dashboard>