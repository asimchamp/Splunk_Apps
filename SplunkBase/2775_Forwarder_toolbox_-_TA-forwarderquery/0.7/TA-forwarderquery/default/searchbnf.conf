##################
# TA-forwarderquery
##################
[forwarderquery-command]
syntax = |forwarderquery server="xyz" api="/services/..." stanza="default" method="POST" data="{'name':'$path$','index':'$index$','sourcetype':'$sourcetype$'}"
description = this command will contact the forwarder rest port and get the xml presented in a field xmlresults
usage = public
example1 = |forwarderquery server="xyz" api="/services/data/outputs/tcp/server" stanza="default"| spath input=xmlresults| fields - xmlresults| fields feed.entry.title | rename feed.entry.title AS indexershortdesc = query the nimbus webservice interface
comment1 = get the forwarder
example2 = |forwarderquery server="xyz" api="/servicesNS/nobody" stanza="default" | spath input=xmlresults | rename feed.entry.title AS title | table title | mvexpand title | rename title AS app
comment2 = get the installed apps
example3 = |forwarderquery server="xyz" api="/servicesNS/nobody/search/data/inputs/monitor/"   | spath input=xmlresults | rename feed.entry.id AS id | rename feed.entry.title AS title | rename feed.entry.updated AS updated | eval tmp=mvzip(title,id) | table tmp | mvexpand tmp | eval tmp=split(tmp,",")| eval file=mvindex(tmp,0) | eval id=mvindex(tmp,1) | search id="*search*" | table file
comment3 = get the locally added monitored files
example4 = |forwarderquery server="xyz" method="POST" api="/services/server/control/restart" 
comment4 = restart the server
example5 = forwarderquery server="xyz" api="/services/data/inputs/oneshot" stanza="default" method="POST" data="{'name':'/path/file.name','index':'xxx','sourcetype':'yyy'}"
comment5 = add a file via oneshot
related = 
tags = 

[forwarderquerystreaming-command]
syntax = | forwarderquerystreaming api="/services/..." 
description = this command will contact the forwarder rest port for each host in previous search results and get the xml presented in a field returnvalue. Also allows GET|POST|DELETE and url encoded data="{'name':'the name',...}
usage = public
example1 = | metadata type=hosts index=_internal| fields host | forwarderquerystreaming api="/services/deployment/client" | search returnvalue!="targetUri" | spath input=returnvalue | fields host,feed.entry.content.s:dict.s:key,returnvalue
comment1 = Check deployment client of all hosts that send data for "targetUri" i.e. a set deploy-poll config
