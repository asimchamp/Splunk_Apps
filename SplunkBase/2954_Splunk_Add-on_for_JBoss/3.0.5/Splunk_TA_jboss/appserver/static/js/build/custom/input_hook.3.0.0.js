var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function r(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.d(t,{Z:()=>a});const a=function(){function e(t,r,n,o,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=r,this.state=n,this.mode=o,this.util=a}var t,a;return t=e,(a=[{key:"onRender",value:function(){var e=window.location.href.replace("inputs","configuration"),t=["object_name","operation_name","signature","params","split_array"];this.util.setState((function(o){var a=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}({},o.data);return a.account.markdownMessage={text:"Select an account. Additional accounts may be configured from ##here##",link:e,markdownType:"hybrid",token:"##here##",linkText:"here"},t.forEach((function(e){a[e].disabled=!0})),{data:a}}))}}])&&o(t.prototype,a),e}();var i=t.Z;export{i as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRfaG9vay4zLjAuMC5qcyIsIm1hcHBpbmdzIjoiQUFDQSxJQUFJQSxFQUFzQixDQ0ExQixFQUF3QixDQUFDQyxFQUFTQyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hGLEVBQW9CSSxFQUFFRixFQUFZQyxLQUFTSCxFQUFvQkksRUFBRUgsRUFBU0UsSUFDNUVFLE9BQU9DLGVBQWVMLEVBQVNFLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxNQ0ozRSxFQUF3QixDQUFDTSxFQUFLQyxJQUFVTCxPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxJLGtoQkNnRWxGLFFBMURNSSxXQWdCSix1Qiw0RkFBMEQsU0FDeERDLEtBQUEsZUFDQUEsS0FBQSxjQUNBQSxLQUFBLFFBQ0FBLEtBQUEsT0FDQUEsS0FBQSxPLDZDQUtGLFdBRUUsSUFBSUMsRUFBcUJDLE9BQUFBLFNBQUFBLEtBQUFBLFFBQUFBLFNBQXpCLGlCQUlJQyxFQUFrQixDQUFDLGNBQUQsc0NBQXRCLGVBU0FILEtBQUEsZUFBbUIsWUFDakIsSUFBSUksRSwrVkFBTyxDQUFILEdBQVFDLEVBQWhCLE1BV0EsT0FWQUQsRUFBQUEsUUFBQUEsZ0JBQStCLENBQzdCRSxLQUQ2Qix5RUFFN0JDLEtBRjZCLEVBRzdCQyxhQUg2QixTQUk3QkMsTUFKNkIsV0FLN0JDLFNBQVUsUUFFWlAsRUFBQUEsU0FBd0IsWUFDdEJDLEVBQUFBLEdBQUFBLFVBQUFBLEtBRUssQ0FBRUEsS0FBQUEsVyxtQkFyRFRMLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGx1bmtfVEFfamJvc3Mvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2pib3NzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfamJvc3Mvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfamJvc3MvLi91Y2NfdWlfZXh0ZW5zaW9ucy9pbnB1dF9ob29rLjMuMC4wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjEgU3BsdW5rLCBJbmMuIDxzYWxlc0BzcGx1bmsuY29tPlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExpY2Vuc2VSZWYtU3BsdW5rLTgtMjAyMVxuICpcbiAqL1xuXG5jbGFzcyBJbnB1dEhvb2sge1xuICAvKipcbiAgICogRm9ybSBob29rXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge09iamVjdH0gZ2xvYmFsQ29uZmlnIC0gR2xvYmFsIGNvbmZpZ3VyYXRpb24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzZXJ2aWNlTmFtZSAtIFNlcnZpY2UgbmFtZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBJbml0aWFsIHN0YXRlIG9mIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIC0gZWRpdCxjcmVhdGUgb3IgY2xvbmVcbiAgICogQHBhcmFtIHtvYmplY3R9IHV0aWwgLSBPYmplY3QgY29udGFpbmluZyB1dGlsaXR5IG1ldGhvZHNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVycm9yTXNnLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3JGaWVsZE1zZyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyQWxsRXJyb3JNc2dcbiAgICogICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihnbG9iYWxDb25maWcsIHNlcnZpY2VOYW1lLCBzdGF0ZSwgbW9kZSwgdXRpbCkge1xuICAgIHRoaXMuZ2xvYmFsQ29uZmlnID0gZ2xvYmFsQ29uZmlnO1xuICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICB0aGlzLnV0aWwgPSB1dGlsO1xuICB9XG4gIC8qXG5cdFx0UHV0IGxvZ2ljIGhlcmUgdG8gZXhlY3V0ZSBqYXZhc2NyaXB0IHdoZW4gVUkgZ2V0cyByZW5kZXJlZC5cblx0Ki9cbiAgb25SZW5kZXIoKSB7XG4gICAgLyogR2V0IHdpbmRvdyB1cmwgdG8gYWRkIHJlZGlyZWN0IHRvIENvbmZpZ3VyYXRpb24gcGFnZSBpbiBhY2NvdW50IGZpZWxkIGhlbHAgdGV4dCAqL1xuICAgIHZhciBhY2NvdW50X2NvbmZpZ191cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKFxuICAgICAgXCJpbnB1dHNcIixcbiAgICAgIFwiY29uZmlndXJhdGlvblwiXG4gICAgKTtcbiAgICB2YXIgZmllbGRzVG9EaXNhYmxlID0gW1xuICAgICAgXCJvYmplY3RfbmFtZVwiLFxuICAgICAgXCJvcGVyYXRpb25fbmFtZVwiLFxuICAgICAgXCJzaWduYXR1cmVcIixcbiAgICAgIFwicGFyYW1zXCIsXG4gICAgICBcInNwbGl0X2FycmF5XCIsXG4gICAgXTtcblxuICAgIC8qIE9uIGxvYWQgb2YgSW5wdXRzIHBhZ2UgYWRkIGhlbHAgdGV4dCB1bmRlciBhY2NvdW50IGZpZWxkIGFuZCBkaXNhYmxlIDUgZmllbGRzICovXG4gICAgdGhpcy51dGlsLnNldFN0YXRlKChwcmV2U3RhdGUpID0+IHtcbiAgICAgIGxldCBkYXRhID0geyAuLi5wcmV2U3RhdGUuZGF0YSB9O1xuICAgICAgZGF0YS5hY2NvdW50Lm1hcmtkb3duTWVzc2FnZSA9IHtcbiAgICAgICAgdGV4dDogXCJTZWxlY3QgYW4gYWNjb3VudC4gQWRkaXRpb25hbCBhY2NvdW50cyBtYXkgYmUgY29uZmlndXJlZCBmcm9tICMjaGVyZSMjXCIsXG4gICAgICAgIGxpbms6IGFjY291bnRfY29uZmlnX3VybCxcbiAgICAgICAgbWFya2Rvd25UeXBlOiBcImh5YnJpZFwiLFxuICAgICAgICB0b2tlbjogXCIjI2hlcmUjI1wiLFxuICAgICAgICBsaW5rVGV4dDogXCJoZXJlXCIsXG4gICAgICB9O1xuICAgICAgZmllbGRzVG9EaXNhYmxlLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIGRhdGFbZmllbGRdLmRpc2FibGVkID0gdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4geyBkYXRhIH07XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRIb29rO1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiSW5wdXRIb29rIiwidGhpcyIsImFjY291bnRfY29uZmlnX3VybCIsIndpbmRvdyIsImZpZWxkc1RvRGlzYWJsZSIsImRhdGEiLCJwcmV2U3RhdGUiLCJ0ZXh0IiwibGluayIsIm1hcmtkb3duVHlwZSIsInRva2VuIiwibGlua1RleHQiXSwic291cmNlUm9vdCI6IiJ9