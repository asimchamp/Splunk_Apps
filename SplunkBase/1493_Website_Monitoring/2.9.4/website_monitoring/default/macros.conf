[response_time_threshold]
definition = 1000

[response_time_threshold_warning]
definition = 800

[timesince(2)]
args = sourceField,destField
definition = eval now=time() | eval $destField$ = case( $sourceField$ > now, "0 minutes ago", now-$sourceField$ > (2*86400), round((now-$sourceField$) / (86400)) . " days ago", now-$sourceField$ > (2*3600), round((now-$sourceField$) / (3600)) . " hours ago", now-$sourceField$ > (2*60), round((now-$sourceField$) / (60)) . " minutes ago", now-$sourceField$ > 60, "1 minute ago", now-$sourceField$ <= 60, "just now" ) | fields - now
iseval = 0

[duration(3)]
args = startField,endField,destField
definition = eval $destField$ = case( $startField$ > $endField$, "0 minutes", $endField$-$startField$ > (2*86400), round(($endField$-$startField$) / (86400)) . " days", $endField$-$startField$ > (2*3600), round(($endField$-$startField$) / (3600)) . " hours", $endField$-$startField$ > (2*60), round(($endField$-$startField$) / (60)) . " minutes", $endField$-$startField$ > 60, "1 minute", $endField$-$startField$ <= 60, "< a minute" )
iseval = 0

[format_events]
definition = eval time=_time | eval response_time=total_time | convert ctime(time) | fillnull response_code value="Connection failed" | eval response_code=if(timed_out == "True", "Connection timed out", response_code) | fields - _raw _time | fields time response_code response_time

[format_events_raw]
definition = eval time=_time | eval response_time=total_time | convert ctime(time) | fillnull response_code value="Connection failed" | eval response_code=if(timed_out == "True", "Connection timed out", response_code)

[format_events_ex]
definition = eval time=_time | eval response_time=total_time | convert ctime(time) | fillnull response_code value="Connection failed" | eval response_code=if(timed_out == "True", "Connection timed out", response_code) | fields - _raw _time | fields time title url response_code response_time

[filter_inoperable]
definition = (response_code>=400 OR timed_out="True" OR NOT response_code="*" OR response_code="")

[filter_disabled]
definition = | join source [| inputlookup append=t web_ping_inputs.csv | search disabled=0]

[response_codes_to_alert_on]
definition = response_code>=400

[filter_response_codes_and_response_times]
definition = `response_codes_to_alert_on` OR response_time>=`response_time_threshold` OR response_code="*false" OR response_code="Connection failed" OR response_code="Connection timed out" OR timed_out=True OR response_code="" OR has_expected_string="false"

# This defines the search index (or indexes) that the app should search. Change this if you want
# the views to search a particular index.
# Example:
# definition = index=main
[website_monitoring_search_index]
definition = ()

[set_response_code]
definition = eval response_code=case(timed_out == "True", "Connection timed out", isnull(response_code) OR response_code="", "Connection failed", true(), response_code).coalesce(" ".has_expected_string,"")
iseval = 0

[set_status]
definition = eval error_threshold=coalesce(error_threshold,`response_time_threshold`), warning_threshold=coalesce(warning_threshold,`response_time_threshold_warning`), status = case(`response_codes_to_alert_on` OR total_time>=error_threshold OR response_code="*false" OR response_code="Connection failed" OR response_code="Connection timed out" OR timed_out=True OR response_code="" OR has_expected_string="false", "Failed", total_time>=warning_threshold, "Warning", true(), "OK")
iseval = 0

